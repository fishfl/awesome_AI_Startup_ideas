{
    "id": "/vosen/ZLUDA",
    "issues": "122",
    "watch": "149",
    "fork": "755",
    "star": "12k",
    "topics": [
        "rust",
        "cuda"
    ],
    "license": "Apache License 2.0",
    "languages": [
        "Rust,97.1%",
        "LLVM,2.3%",
        "C,0.3%",
        "C++,0.2%",
        "Python,0.1%",
        "Dockerfile,0.0%"
    ],
    "contributors": [
        "https://avatars.githubusercontent.com/u/1206376?s=64&v=4",
        "https://avatars.githubusercontent.com/u/215568077?s=64&v=4",
        "https://avatars.githubusercontent.com/u/39169351?s=64&v=4",
        "https://avatars.githubusercontent.com/u/7355383?s=64&v=4",
        "https://avatars.githubusercontent.com/u/17372086?s=64&v=4",
        "https://avatars.githubusercontent.com/u/162074?s=64&v=4",
        "https://avatars.githubusercontent.com/u/510566?s=64&v=4",
        "https://avatars.githubusercontent.com/u/547138?s=64&v=4",
        "https://avatars.githubusercontent.com/u/873436?s=64&v=4",
        "https://avatars.githubusercontent.com/u/28377948?s=64&v=4",
        "https://avatars.githubusercontent.com/u/31252332?s=64&v=4",
        "https://avatars.githubusercontent.com/u/39712181?s=64&v=4"
    ],
    "about": "CUDA on non-NVIDIA GPUs",
    "is_AI": "y",
    "category": "",
    "summary": "Sure! Here's the English translation of your content, preserved in Markdown format:\n\n---\n\n## 1. Project Core Content and Problems Solved\n\n**Project Name: ZLUDA**\n\n**Core Content:**  \nZLUDA is a **CUDA-compatible alternative for non-NVIDIA GPUs**, offering a \"plug-and-play\" solution that enables CUDA applications originally designed to run only on NVIDIA graphics cards to now operate on **AMD Radeon RX 5000 series or newer GPUs**.\n\n**Main Problems Addressed:**\n- **Closed Nature of the CUDA Ecosystem**: CUDA is NVIDIA‚Äôs proprietary technology, limited to NVIDIA GPUs, which restricts choices for developers and users.\n- **Cross-Platform Compatibility Issues**: Many high-performance computing (HPC), AI training/inference, and scientific computing applications rely on CUDA, but AMD GPU users cannot run them directly.\n- **Reducing Hardware Dependency Costs**: Allows users without NVIDIA GPUs to leverage the existing CUDA software ecosystem without purchasing an NVIDIA graphics card.\n\n---\n\n## 2. Breakthroughs or Innovations of the Project\n\n- ‚úÖ **Seamless Porting of CUDA to AMD GPUs**: Run original CUDA programs without modification, supporting dynamic translation from PTX instruction set to HIP (AMD‚Äôs CUDA-like interface).\n- üîß **High Compatibility Design**: Achieve plug-and-play by replacing `nvcuda.dll` or `libcuda.so`, simulating NVIDIA driver interfaces.\n- üöÄ **Near Native Performance**: While still under development, the goal is to approach the execution efficiency of native CUDA.\n- üõ†Ô∏è **Open Source and Extensible Architecture**: Modular design allows for community contributions, enabling gradual support for more instruction sets or GPU models.\n- üì¶ **Supports Windows/Linux Platforms**, providing a unified solution across different operating systems.\n\n---\n\n## 3. Promising Startup Ideas Based on This Technology\n\nHere are several startup or productization directions that can be built upon ZLUDA technology:\n\n### üí° Startup Idea 1: **Cross-Platform AI Inference Deployment Platform**\n- **Description**: Build an AI inference engine platform that supports multiple GPU architectures (NVIDIA/AMD), allowing users to upload models and automatically adapt and deploy them on any GPU.\n- **Advantages**:\n  - Reduces enterprise dependency on specific GPU brands;\n  - Improves resource utilization, especially in mixed-GPU data centers;\n  - Can be offered as a SaaS service with usage-based pricing.\n\n---\n\n### üí° Startup Idea 2: **Cross-GPU Development Toolchain for Developers**\n- **Description**: Provide a development suite integrated with ZLUDA support, including IDE plugins, debuggers, performance analysis tools, etc., helping developers quickly test how their CUDA apps perform on AMD GPUs.\n- **Advantages**:\n  - Appeals to independent developers seeking reduced hardware lock-in;\n  - Can be deeply integrated with Rust/C++/Python communities;\n  - Potential to evolve into a commercial SDK/toolkit.\n\n---\n\n### üí° Startup Idea 3: **Middleware for Cloud Gaming / Cloud Rendering Optimization**\n- **Description**: Offer middleware to cloud gaming or rendering providers, enabling them to use cheaper AMD GPUs to run graphics processing algorithms previously dependent on CUDA (e.g., ray tracing, video encoding).\n- **Advantages**:\n  - Lowers hardware costs for cloud providers;\n  - Suitable for large-scale GPU rendering farms;\n  - Opportunity to integrate with major cloud vendors.\n\n---\n\n### üí° Startup Idea 4: **Heterogeneous Computing Teaching Platform for Education/Research**\n- **Description**: Create a teaching and experimentation platform supporting multi-GPU platforms, helping students learn CUDA programming while understanding underlying architecture differences, and running example code on AMD devices via ZLUDA.\n- **Advantages**:\n  - Large education market sensitive to price;\n  - Can be packaged as part of virtual labs or online courses;\n  - Emphasizes openness and cross-platform capabilities.\n\n---\n\n### üí° Startup Idea 5: **High-Performance Computing Solutions for Mac Users**\n- **Description**: Although macOS support is not currently available, if ZLUDA expands to macOS in the future, it could enable a high-performance computing toolkit targeting Apple M-series chips with external AMD GPUs.\n- **Advantages**:\n  - Mac user base is small but highly capable of paying;\n  - Growing demand for local HPC in Apple‚Äôs self-developed chip ecosystem;\n  - Can be positioned as a productivity tool for creative professionals.\n\n---\n\n## Summary\n\nZLUDA represents a significant technological breakthrough with strategic importance. It breaks NVIDIA‚Äôs monopoly over the CUDA ecosystem and opens new possibilities for the open-source community and users of non-NVIDIA GPUs. Whether used as foundational infrastructure or expanded into commercial applications, ZLUDA holds great potential for startups and offers valuable opportunities across various application scenarios.\n\n--- \n\nLet me know if you'd like this translated into another format (e.g., presentation slides, technical whitepaper, investor pitch deck, etc.).",
    "text": "ZLUDA\nZLUDA is a drop-in replacement for CUDA on non-NVIDIA GPU. ZLUDA allows to run unmodified CUDA applications using non-NVIDIA GPUs with near-native performance.\nZLUDA supports AMD Radeon RX 5000 series and newer GPUs (both desktop and integrated).\nZLUDA is work in progress. Follow development here and say hi on\nDiscord\n. For more details see the announcement:\nhttps://vosen.github.io/ZLUDA/blog/zludas-third-life/\nUsage\nWarning\n: This version ZLUDA is under heavy development (more\nhere\n) and right now only supports Geekbench. ZLUDA probably will not work with your application just yet.\nWindows\nYou should have recent AMD GPU driver (\"AMD Software: Adrenalin Edition\") installed.\nTo run your application you should etiher:\n(Recommended approach) Copy ZLUDA-provided\nnvcuda.dll\nand\nnvml.dll\nfrom\ntarget\\release\n(if built from sources) or\nzluda\n(if downloaded a zip package) into a path which your application uses to load CUDA. Paths vary application to application, but usually it's the directory where the .exe file is located\nUse ZLUDA launcher like below. ZLUDA launcher is known to be buggy and incomplete:\n<ZLUDA_DIRECTORY>\\zluda_with.exe -- <APPLICATION> <APPLICATIONS_ARGUMENTS>\nLinux\nRun your application like this:\nLD_LIBRARY_PATH=<ZLUDA_DIRECTORY> <APPLICATION> <APPLICATIONS_ARGUMENTS>\nwhere\n<ZLUDA_DIRECTORY>\nis the directory which contains ZLUDA-provided\nlibcuda.so\n:\ntarget/release\nif you built from sources or\nzluda\nif you downloaded prebuilt package.\nMacOS\nNot supported\nBuilding\nDependencies\nGit\nCMake\nPython 3\nRust compiler (recent version)\nC++ compiler\n(Optional, but recommended)\nNinja build system\nBuild steps\nGit clone the repo (make sure to use\n--recursive\noption to fetch submodules):\ngit clone --recursive https://github.com/vosen/ZLUDA.git\nEnter freshly cloned\nZLUDA\ndirectory and build with cargo (this takes a while):\ncargo xtask --release\nContributing\nZLUDA project has a commercial backing and\ndoes not\naccept donations.\nZLUDA project accepts pull requests and other non-monetary contributions.\nIf you want to contribute a code fix or documentation update feel free to open a Pull Request.\nGetting started\nThere's no architecture document (yet). Two most important crates in ZLUDA are\nptx\n(PTX compiler) and\nzluda\n(AMD GPU runtime). A good starting point to tinkering the project is to run one of the\nptx\nunit tests under a debugger and understand what it is doing.\ncargo test -p ptx -- ::add_hip\nis a simple test that adds two numbers.\nGithub issues tagged with\n\"help wanted\"\nare tasks that are self-containted. Their level of difficulty varies, they are not always good beginner tasks, but they defined unambiguously.\nIf you have questions feel free to ask on\n#devtalk channel on Discord\n.\nLicense\nThis software is dual-licensed under either the Apache 2.0 license or the MIT license. See\nLICENSE-APACHE\nor\nLICENSE-MIT\nfor details",
    "readme": "[![Discord](https://img.shields.io/badge/Discord-%235865F2.svg?style=for-the-badge&logo=discord&logoColor=white)](https://discord.gg/sg6BNzXuc7)\n\n# ZLUDA\n\nZLUDA is a drop-in replacement for CUDA on non-NVIDIA GPU. ZLUDA allows to run unmodified CUDA applications using non-NVIDIA GPUs with near-native performance.\n\nZLUDA supports AMD Radeon RX 5000 series and newer GPUs (both desktop and integrated).\n\n![GeekBench 5.5.1 chart](https://raw.githubusercontent.com/vosen/ZLUDA/master/geekbench.svg)\n\nZLUDA is work in progress. Follow development here and say hi on [Discord](https://discord.gg/sg6BNzXuc7). For more details see the announcement: https://vosen.github.io/ZLUDA/blog/zludas-third-life/\n\n## Usage\n**Warning**: This version ZLUDA is under heavy development (more [here](https://vosen.github.io/ZLUDA/blog/zludas-third-life/)) and right now only supports Geekbench. ZLUDA probably will not work with your application just yet.\n\n### Windows\nYou should have recent AMD GPU driver (\"AMD Software: Adrenalin Edition\") installed.\\\nTo run your application you should etiher:\n* (Recommended approach) Copy ZLUDA-provided `nvcuda.dll` and `nvml.dll` from `target\\release` (if built from sources) or `zluda` (if downloaded a zip package) into a path which your application uses to load CUDA. Paths vary application to application, but usually it's the directory where the .exe file is located\n* Use ZLUDA launcher like below. ZLUDA launcher is known to be buggy and incomplete:\n    ```\n    <ZLUDA_DIRECTORY>\\zluda_with.exe -- <APPLICATION> <APPLICATIONS_ARGUMENTS>\n    ```\n\n### Linux\n\nRun your application like this:\n```\nLD_LIBRARY_PATH=<ZLUDA_DIRECTORY> <APPLICATION> <APPLICATIONS_ARGUMENTS>\n```\n\nwhere `<ZLUDA_DIRECTORY>` is the directory which contains ZLUDA-provided `libcuda.so`: `target/release` if you built from sources or `zluda` if you downloaded prebuilt package.\n\n### MacOS\n\nNot supported\n\n## Building\n\n### Dependencies\n\n* Git\n* CMake\n* Python 3\n* Rust compiler (recent version)\n* C++ compiler\n* (Optional, but recommended) [Ninja build system](https://ninja-build.org/)\n\n### Build steps\n\n* Git clone the repo (make sure to use `--recursive` option to fetch submodules):  \n`git clone --recursive https://github.com/vosen/ZLUDA.git`  \n* Enter freshly cloned `ZLUDA` directory and build with cargo (this takes a while):  \n`cargo xtask --release`\n\n## Contributing\n\nZLUDA project has a commercial backing and _does not_ accept donations.\nZLUDA project accepts pull requests and other non-monetary contributions.\n\nIf you want to contribute a code fix or documentation update feel free to open a Pull Request.\n\n### Getting started\n\nThere's no architecture document (yet). Two most important crates in ZLUDA are `ptx` (PTX compiler) and `zluda` (AMD GPU runtime). A good starting point to tinkering the project is to run one of the `ptx` unit tests under a debugger and understand what it is doing. `cargo test -p ptx -- ::add_hip` is a simple test that adds two numbers.\n\nGithub issues tagged with [\"help wanted\"](https://github.com/vosen/ZLUDA/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22) are tasks that are self-containted. Their level of difficulty varies, they are not always good beginner tasks, but they defined unambiguously.\n\nIf you have questions feel free to ask on [#devtalk channel on Discord](https://discord.com/channels/1273316903783497778/1303329281409159270).\n\n\n## License\n\nThis software is dual-licensed under either the Apache 2.0 license or the MIT license. See [LICENSE-APACHE](LICENSE-APACHE) or [LICENSE-MIT](LICENSE-MIT) for details\n",
    "author": "vosen",
    "project": "ZLUDA",
    "date": "2025-07-08"
}