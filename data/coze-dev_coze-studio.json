{
    "id": "/coze-dev/coze-studio",
    "issues": "322",
    "watch": "105",
    "fork": "2.4k",
    "star": "17.5k",
    "topics": [
        "go",
        "agent",
        "workflow",
        "typescript",
        "chatbot",
        "studio",
        "chatbot-framework",
        "no-code",
        "rag",
        "agent-platform",
        "coze",
        "generative-ai",
        "low-code-ai",
        "ai-plugins",
        "multimodel-ai",
        "coze-platform",
        "kouzi"
    ],
    "license": "Apache License 2.0",
    "languages": [
        "TypeScript,80.9%",
        "Go,13.4%",
        "Less,2.7%",
        "Thrift,1.4%",
        "JavaScript,1.0%",
        "HCL,0.3%"
    ],
    "contributors": [],
    "about": "An AI agent development platform with all-in-one visual tools, simplifying agent creation, debugging, and deployment like never before. Coze your way to AI Agent creation.",
    "is_AI": "y",
    "category": "Agent/Robot",
    "summary": "### Core Content and Problems Addressed\n\nCoze Studio is an integrated AI Agent development platform that provides a visual toolchain for low-code/no-code development across the entire lifecycle—from creation and debugging to deployment. Its core features include:\n\n- **Integration with Leading Large Model Services**: Supports integration with major models such as OpenAI and Volcengine, simplifying model management.\n- **Full-Featured Development Environment**: Offers comprehensive capabilities for developing resources including Agent construction, application development, workflow orchestration, plugins, knowledge bases, databases, and prompt management.\n- **Low-Barrier Development Model**: Enables building AI workflows and agents through visual drag-and-drop interfaces, reducing developers’ need to understand complex AI technology stacks.\n- **Rapid Deployment and Integration**: Provides complete APIs and SDKs (e.g., Chat SDK) to quickly embed AI Agents into existing systems.\n\nKey problems addressed:\n1. Traditional AI Agent development involves complex processes and high technical barriers, requiring integration of multiple disparate tools and services;\n2. Lack of a unified platform supporting end-to-end Agent design, debugging, and publishing;\n3. Enterprises and individual developers struggle to deploy customized AI applications at low cost.\n\n---\n\n### Breakthroughs and Innovations\n\n1. **End-to-End Visual AI Agent Development Paradigm**: For the first time integrates core components of Agent development—such as model invocation, RAG, plugins, knowledge bases, and workflows—into a single visual interface, enabling a \"what-you-see-is-what-you-get\" development experience.\n2. **Open-Source and Extensible Microservices Architecture**: Built with Golang + React + TypeScript, adopting domain-driven design (DDD) and a microservices architecture for high performance and scalability, facilitating enterprise-level customization and private deployment.\n3. **Open-Core Engine to Foster Community Collaboration**: The core engine of Coze—a platform already serving hundreds of thousands of enterprises—is open-sourced for the first time, promoting shared growth and collaboration within the AI Agent technology ecosystem.\n4. **Workflow Engine Supporting Multi-Resource Orchestration**: Empowers flexible composition of plugins, databases, knowledge bases, and other resources via graphical workflow design, significantly improving efficiency in building complex business logic.\n5. **Low-Cost, Rapid Onboarding Solution**: Offers templated configurations, one-click deployment, and comprehensive documentation, drastically lowering the initial adoption barrier.",
    "text": "Coze Studio\n•\nFeature list\n•\nQuickstart\n•\nDeveloper Guide\nEnglish |\n中文\nWhat is Coze Studio?\nCoze Studio\nis an all-in-one AI agent development tool. Providing the latest large models and tools, various development modes and frameworks, Coze Studio offers the most convenient AI agent development environment, from development to deployment.\nProvides all core technologies needed for AI agent development\n: prompt, RAG, plugin, workflow, enabling developers to focus on creating the core value of AI.\nReady to use for professional AI agent development at the lowest cost\n: Coze Studio provides developers with complete app templates and build frameworks, allowing you to quickly construct various AI agents and turn creative ideas into reality.\nCoze Studio, derived from the \"Coze Development Platform\" which has served tens of thousands of enterprises and millions of developers, we have made its core engine completely open. It is a one-stop visual development tool for AI Agents that makes creating, debugging, and deploying AI Agents unprecedentedly simple. Through Coze Studio's visual design and build tools, developers can quickly create and debug agents, apps, and workflows using no-code or low-code approaches, enabling powerful AI app development and more customized business logic. It's an ideal choice for building low-code AI products tailored . Coze Studio aims to lower the threshold for AI agent development and application, encouraging community co-construction and sharing for deeper exploration and practice in the AI field.\nThe backend of Coze Studio is developed using Golang, the frontend uses React + TypeScript, and the overall architecture is based on microservices and built following domain-driven design (DDD) principles. Provide developers with a high-performance, highly scalable, and easy-to-customize underlying framework to help them address complex business needs.\nFeature list\nModule\nFeature\nModel service\nManage the model list, integrate services such as OpenAI and Volcengine\nBuild agent\n* Build, publish, and manage agent\n* Support configuring workflows, knowledge bases, and other resources\nBuild apps\n* Create and publish apps\n* Build business logic through workflows\nBuild a workflow\nCreate, modify, publish, and delete workflows\nDevelop resources\nSupport creating and managing the following resources:\n* Plugins\n* Knowledge bases\n* Databases\n* Prompts\nAPI and SDK\n* Create conversations, initiate chats, and other OpenAPI\n* Integrate agents or apps into your own app through Chat SDK\nQuickstart\nLearn how to obtain and deploy the open-source version of Coze Studio, quickly build projects, and experience Coze Studio's open-source version.\nEnvironment requirements:\nBefore installing Coze Studio, please ensure that your machine meets the following minimum system requirements: 2 Core、4 GB\nPre-install Docker and Docker Compose, and start the Docker service.\nDeployment steps:\nRetrieve the source code.\n#\nClone code\ngit clone https://github.com/coze-dev/coze-studio.git\nConfigure the model.\nCopy the template files of the doubao-seed-1.6 model from the template directory and paste them into the configuration file directory.\ncd\ncoze-studio\n#\nCopy model configuration template\ncp backend/conf/model/template/model_template_ark_doubao-seed-1.6.yaml backend/conf/model/ark_doubao-seed-1.6.yaml\nModify the template file in the configuration file directory.\nEnter the directory\nbackend/conf/model\n. Open the file\nark_doubao-seed-1.6.yaml\n.\nSet the fields\nid\n,\nmeta.conn_config.api_key\n,\nmeta.conn_config.model\n, and save the file.\nid\n: The model ID in Coze Studio, defined by the developer, must be a non-zero integer and globally unique. Agents or workflows call models based on model IDs. For models that have already been launched, do not modify their IDs; otherwise, it may result in model call failures.\nmeta.conn_config.api_key\n: The API Key for the model service. In this example, it is the API Key for Ark API Key. For more information, see\nGet Volcengine Ark API Key\nor\nGet BytePlus ModelArk API Key\n.\nmeta.conn_config.model\n: The Model name for the model service. In this example, it refers to the Model ID or Endpoint ID of Ark. For more information, see\nGet Volcengine Ark Model ID\n/\nGet Volcengine Ark Endpoint ID\nor\nGet BytePlus ModelArk Model ID\n/\nGet BytePlus ModelArk Endpoint ID\n.\nFor users in China, you may use Volcengine Ark; for users outside China, you may use BytePlus ModelArk instead.\nDeploy and start the service.\nWhen deploying and starting Coze Studio for the first time, it may take a while to retrieve images and build local images. Please be patient. During deployment, you will see the following log information. If you see the message \"Container coze-server Started,\" it means the Coze Studio service has started successfully.\n#\nStart the service\ncd\ndocker\ncp .env.example .env\ndocker compose up -d\nFor common startup failure issues,\nplease refer to the\nFAQ\n.\nAfter starting the service, you can open Coze Studio by accessing\nhttp://localhost:8888/\nthrough your browser.\nWarning\nIf you want to deploy Coze Studio in a public network environment, it is recommended to assess security risks before you begin, and take corresponding protection measures. Possible security risks include account registration functions, Python execution environments in workflow code nodes, Coze Server listening address configurations, SSRF (Server - Side Request Forgery), and some horizontal privilege escalations in APIs.  For more details, refer to\nQuickstart\n.\nDeveloper Guide\nProject Configuration\n:\nModel Configuration\n: Before deploying the open-source version of Coze Studio, you must configure the model service. Otherwise, you cannot select models when building agents, workflows, and apps.\nPlugin Configuration\n: To use official plugins from the plugin store, you must first configure the plugins and add the authentication keys for third-party services.\nBasic Component Configuration\n: Learn how to configure components such as image uploaders to use functions like image uploading in Coze Studio .\nAPI Reference\n: The Coze Studio Community Edition API and Chat SDK are authenticated using Personal Access Token, providing APIs for conversations and workflows.\nDevelopment Guidelines\n:\nProject Architecture\n: Learn about the technical architecture and core components of the open-source version of Coze Studio.\nCode Development and Testing\n: Learn how to perform secondary development and testing based on the open-source version of Coze Studio.\nTroubleshooting\n: Learn how to view container states and system logs.\nUsing the open-source version of Coze Studio\nRegarding how to use Coze Studio, refer to the\nCoze Development Platform Official Documentation Center\nfor more information. Please note that certain features, such as tone customization, are limited to the commercial version. Differences between the open-source and commercial versions can be found in the\nFeature List\n.\nQuick Start\n: Quickly build an AI assistant agent with Coze Studio.\nDeveloping Agents\n: Learn how to create, build, publish, and manage agents. You can use functions such as knowledge, plugins, etc., to resolve model hallucination and lack of expertise in professional fields. In addition, Coze Studio provides rich memory features that enable agents to generate more accurate responses based on a personal user's historical conversations during interactions.\nDevelop workflows\n: A workflow is a set of executable instructions used to implement business logic or complete specific tasks. It structures data flow and task processing for apps or agents. Coze Studio provides a visual canvas where you can quickly build workflows by dragging and dropping nodes.\nResources such as plugins\n: In Coze Studio, workflows, plugins, databases, knowledge bases, and variables are collectively referred to as resources.\nAPI & SDK\n: Coze Studio supports\nAPI related to chat and workflows\n, and you can also integrate agents or apps with local business systems through\nChat SDK\n.\nTutorials for practice\n: Learn how to use Coze Studio to implement various AI scenarios, such as building web-based online customer service using Chat SDK.\nLicense\nThis project uses the Apache 2.0 license. For details, please refer to the\nLICENSE\nfile.\nCommunity contributions\nWe welcome community contributions. For contribution guidelines, please refer to\nCONTRIBUTING\nand\nCode of conduct\n. We look forward to your contributions!\nSecurity and privacy\nIf you discover potential security issues in the project, or believe you may have found a security issue, please notify the ByteDance security team through our\nsecurity center\nor\nvulnerability reporting email\n.\nPlease\ndo not\ncreate public GitHub Issues.\nJoin Community\nWe are committed to building an open and friendly developer community. All developers interested in AI Agent development are welcome to join us!\n🐛 Issue Reports & Feature Requests\nTo efficiently track and resolve issues while ensuring transparency and collaboration, we recommend participating through:\nGitHub Issues\n:\nSubmit bug reports or feature requests\nPull Requests\n:\nContribute code or documentation improvements\n💬 Technical Discussion & Communication\nJoin our technical discussion groups to share experiences with other developers and stay updated with the latest project developments:\nFeishu Group Chat\nScan the QR code below with Feishu mobile app to join:\nDiscord Server\nClick to join:\nCoze Community\nTelegram Group\nClick to join: Telegram Group\nCoze\nAcknowledgments\nThank you to all the developers and community members who have contributed to the Coze Studio project. Special thanks:\nThe\nEino\nframework team - providing powerful support for Coze Studio's agent and workflow runtime engines, model abstractions and implementations, and knowledge base indexing and retrieval\nThe\nFlowGram\nteam - providing a high-quality workflow building engine for Coze Studio's frontend workflow canvas editor\nThe\nHertz\nteam - Go HTTP framework with high-performance and strong-extensibility for building micro-services\nAll users who participated in testing and feedback",
    "readme": "![Image](https://p9-arcosite.byteimg.com/tos-cn-i-goo7wpa0wc/943f576df3424fa98580c2ad18946719~tplv-goo7wpa0wc-image.image)\n\n<div align=\"center\"><p>\n<a href=\"#what-is-coze-studio\">Coze Studio</a> •\n<a href=\"#feature-list\">Feature list</a> •\n<a href=\"#quickstart\">Quickstart</a> •\n<a href=\"#developer-guide\">Developer Guide</a>\n</p>\n<p>\n  <img alt=\"License\" src=\"https://img.shields.io/badge/license-apache2.0-blue.svg\">\n  <img alt=\"Go Version\" src=\"https://img.shields.io/badge/go-%3E%3D%201.23.4-blue\">\n</p>\n\nEnglish | [中文](README.zh_CN.md)\n\n</div>\n\n## What is Coze Studio?\n\n[Coze Studio](https://www.coze.cn/home) is an all-in-one AI agent development tool. Providing the latest large models and tools, various development modes and frameworks, Coze Studio offers the most convenient AI agent development environment, from development to deployment. \n\n* **Provides all core technologies needed for AI agent development**: prompt, RAG, plugin, workflow, enabling developers to focus on creating the core value of AI.\n* **Ready to use for professional AI agent development at the lowest cost**: Coze Studio provides developers with complete app templates and build frameworks, allowing you to quickly construct various AI agents and turn creative ideas into reality.\n\nCoze Studio, derived from the \"Coze Development Platform\" which has served tens of thousands of enterprises and millions of developers, we have made its core engine completely open. It is a one-stop visual development tool for AI Agents that makes creating, debugging, and deploying AI Agents unprecedentedly simple. Through Coze Studio's visual design and build tools, developers can quickly create and debug agents, apps, and workflows using no-code or low-code approaches, enabling powerful AI app development and more customized business logic. It's an ideal choice for building low-code AI products tailored . Coze Studio aims to lower the threshold for AI agent development and application, encouraging community co-construction and sharing for deeper exploration and practice in the AI field.\n\nThe backend of Coze Studio is developed using Golang, the frontend uses React + TypeScript, and the overall architecture is based on microservices and built following domain-driven design (DDD) principles. Provide developers with a high-performance, highly scalable, and easy-to-customize underlying framework to help them address complex business needs.\n## Feature list\n| **Module** | **Feature** |\n| --- | --- |\n| Model service | Manage the model list, integrate services such as OpenAI and Volcengine |\n| Build agent | * Build, publish, and manage agent <br> * Support configuring workflows, knowledge bases, and other resources |\n| Build apps | * Create and publish apps <br> * Build business logic through workflows |\n| Build a workflow | Create, modify, publish, and delete workflows |\n| Develop resources | Support creating and managing the following resources: <br> * Plugins <br> * Knowledge bases <br> * Databases <br> * Prompts |\n| API and SDK | * Create conversations, initiate chats, and other OpenAPI <br> * Integrate agents or apps into your own app through Chat SDK |\n\n## Quickstart\nLearn how to obtain and deploy the open-source version of Coze Studio, quickly build projects, and experience Coze Studio's open-source version.\n\nEnvironment requirements:\n\n* Before installing Coze Studio, please ensure that your machine meets the following minimum system requirements: 2 Core、4 GB\n* Pre-install Docker and Docker Compose, and start the Docker service.\n\nDeployment steps:\n\n1. Retrieve the source code.\n   ```Bash\n   # Clone code\n   git clone https://github.com/coze-dev/coze-studio.git\n   ```\n\n2. Configure the model.\n   1. Copy the template files of the doubao-seed-1.6 model from the template directory and paste them into the configuration file directory.\n      ```Bash\n      cd coze-studio\n      # Copy model configuration template\n      cp backend/conf/model/template/model_template_ark_doubao-seed-1.6.yaml backend/conf/model/ark_doubao-seed-1.6.yaml\n      ```\n\n   2. Modify the template file in the configuration file directory.\n      1. Enter the directory `backend/conf/model`. Open the file `ark_doubao-seed-1.6.yaml`.\n      2. Set the fields `id`, `meta.conn_config.api_key`, `meta.conn_config.model`, and save the file.\n         * **id**: The model ID in Coze Studio, defined by the developer, must be a non-zero integer and globally unique. Agents or workflows call models based on model IDs. For models that have already been launched, do not modify their IDs; otherwise, it may result in model call failures.\n         * **meta.conn_config.api_key**: The API Key for the model service. In this example, it is the API Key for Ark API Key. For more information, see [Get Volcengine Ark API Key](https://www.volcengine.com/docs/82379/1541594) or [Get BytePlus ModelArk API Key](https://docs.byteplus.com/en/docs/ModelArk/1361424?utm_source=github&utm_medium=readme&utm_campaign=coze_open_source).\n         * **meta.conn_config.model**: The Model name for the model service. In this example, it refers to the Model ID or Endpoint ID of Ark. For more information, see [Get Volcengine Ark Model ID](https://www.volcengine.com/docs/82379/1513689) / [Get Volcengine Ark Endpoint ID](https://www.volcengine.com/docs/82379/1099522) or  [Get BytePlus ModelArk Model ID](https://docs.byteplus.com/en/docs/ModelArk/model_id?utm_source=github&utm_medium=readme&utm_campaign=coze_open_source) / [Get BytePlus ModelArk Endpoint ID](https://docs.byteplus.com/en/docs/ModelArk/1099522?utm_source=github&utm_medium=readme&utm_campaign=coze_open_source).  \n         > For users in China, you may use Volcengine Ark; for users outside China, you may use BytePlus ModelArk instead.\n3. Deploy and start the service.\n   When deploying and starting Coze Studio for the first time, it may take a while to retrieve images and build local images. Please be patient. During deployment, you will see the following log information. If you see the message \"Container coze-server Started,\" it means the Coze Studio service has started successfully.\n   ```Bash\n   # Start the service\n   cd docker\n   cp .env.example .env\n   docker compose up -d\n   ```\n   For common startup failure issues, **please refer to the [FAQ](https://github.com/coze-dev/coze-studio/wiki/9.-FAQ)**.\n4. After starting the service, you can open Coze Studio by accessing `http://localhost:8888/` through your browser.\n\n> [!WARNING]\n> If you want to deploy Coze Studio in a public network environment, it is recommended to assess security risks before you begin, and take corresponding protection measures. Possible security risks include account registration functions, Python execution environments in workflow code nodes, Coze Server listening address configurations, SSRF (Server - Side Request Forgery), and some horizontal privilege escalations in APIs.  For more details, refer to [Quickstart](https://github.com/coze-dev/coze-studio/wiki/2.-Quickstart#security-risks-in-public-networks).\n\n## Developer Guide\n\n* **Project Configuration**:\n   * [Model Configuration](https://github.com/coze-dev/coze-studio/wiki/3.-Model-configuration): Before deploying the open-source version of Coze Studio, you must configure the model service. Otherwise, you cannot select models when building agents, workflows, and apps.\n   * [Plugin Configuration](https://github.com/coze-dev/coze-studio/wiki/4.-Plugin-Configuration): To use official plugins from the plugin store, you must first configure the plugins and add the authentication keys for third-party services.\n   * [Basic Component Configuration](https://github.com/coze-dev/coze-studio/wiki/5.-Basic-component-configuration): Learn how to configure components such as image uploaders to use functions like image uploading in Coze Studio .\n* [API Reference](https://github.com/coze-dev/coze-studio/wiki/6.-API-Reference): The Coze Studio Community Edition API and Chat SDK are authenticated using Personal Access Token, providing APIs for conversations and workflows.\n* [Development Guidelines](https://github.com/coze-dev/coze-studio/wiki/7.-Development-Standards):\n   * [Project Architecture](https://github.com/coze-dev/coze-studio/wiki/7.-Development-Standards#project-architecture): Learn about the technical architecture and core components of the open-source version of Coze Studio.\n   * [Code Development and Testing](https://github.com/coze-dev/coze-studio/wiki/7.-Development-Standards#code-development-and-testing): Learn how to perform secondary development and testing based on the open-source version of Coze Studio.\n   * [Troubleshooting](https://github.com/coze-dev/coze-studio/wiki/7.-Development-Standards#troubleshooting): Learn how to view container states and system logs.\n\n## Using the open-source version of Coze Studio\n> Regarding how to use Coze Studio, refer to the [Coze Development Platform Official Documentation Center](https://www.coze.cn/open/docs) for more information. Please note that certain features, such as tone customization, are limited to the commercial version. Differences between the open-source and commercial versions can be found in the **Feature List**.\n\n\n* [Quick Start](https://www.coze.cn/open/docs/guides/quickstart): Quickly build an AI assistant agent with Coze Studio.\n* [Developing Agents](https://www.coze.cn/open/docs/guides/agent_overview): Learn how to create, build, publish, and manage agents. You can use functions such as knowledge, plugins, etc., to resolve model hallucination and lack of expertise in professional fields. In addition, Coze Studio provides rich memory features that enable agents to generate more accurate responses based on a personal user's historical conversations during interactions.\n* [Develop workflows](https://www.coze.cn/open/docs/guides/workflow): A workflow is a set of executable instructions used to implement business logic or complete specific tasks. It structures data flow and task processing for apps or agents. Coze Studio provides a visual canvas where you can quickly build workflows by dragging and dropping nodes.\n* [Resources such as plugins](https://www.coze.cn/open/docs/guides/plugin): In Coze Studio, workflows, plugins, databases, knowledge bases, and variables are collectively referred to as resources.\n* **API & SDK**: Coze Studio supports [API related to chat and workflows](https://github.com/coze-dev/coze-studio/wiki/6.-API-Reference), and you can also integrate agents or apps with local business systems through [Chat SDK](https://www.coze.cn/open/docs/developer_guides/web_sdk_overview).\n* [Tutorials for practice](https://www.coze.cn/open/docs/tutorial/chat_sdk_web_online_customer_service): Learn how to use Coze Studio to implement various AI scenarios, such as building web-based online customer service using Chat SDK.\n\n## License\nThis project uses the Apache 2.0 license. For details, please refer to the [LICENSE](https://github.com/coze-dev/coze-studio/blob/main/LICENSE-APACHE) file.\n## Community contributions\nWe welcome community contributions. For contribution guidelines, please refer to [CONTRIBUTING](https://github.com/coze-dev/coze-studio/blob/main/CONTRIBUTING.md) and [Code of conduct](https://github.com/coze-dev/coze-studio/blob/main/CODE_OF_CONDUCT.md). We look forward to your contributions!\n## Security and privacy\nIf you discover potential security issues in the project, or believe you may have found a security issue, please notify the ByteDance security team through our [security center](https://security.bytedance.com/src) or [vulnerability reporting email](mailto:sec@bytedance.com).\nPlease **do not** create public GitHub Issues.\n## Join Community\n\nWe are committed to building an open and friendly developer community. All developers interested in AI Agent development are welcome to join us!\n\n### 🐛 Issue Reports & Feature Requests\nTo efficiently track and resolve issues while ensuring transparency and collaboration, we recommend participating through:\n- **GitHub Issues**: [Submit bug reports or feature requests](https://github.com/coze-dev/coze-studio/issues)\n- **Pull Requests**: [Contribute code or documentation improvements](https://github.com/coze-dev/coze-studio/pulls)\n\n### 💬 Technical Discussion & Communication\nJoin our technical discussion groups to share experiences with other developers and stay updated with the latest project developments:\n\n**Feishu Group Chat**  \nScan the QR code below with Feishu mobile app to join:\n\n![Image](https://p9-arcosite.byteimg.com/tos-cn-i-goo7wpa0wc/0a49081e8f3743e8bf3dcdded4bb571a~tplv-goo7wpa0wc-image.image)\n\n**Discord Server**  \nClick to join: [Coze Community](https://discord.gg/sTVN9EVS4B)\n\n**Telegram Group**  \nClick to join: Telegram Group [Coze](https://t.me/+pP9CkPnomDA0Mjgx)\n\n## Acknowledgments\nThank you to all the developers and community members who have contributed to the Coze Studio project. Special thanks:\n\n* The [Eino](https://github.com/cloudwego/eino) framework team - providing powerful support for Coze Studio's agent and workflow runtime engines, model abstractions and implementations, and knowledge base indexing and retrieval\n* The [FlowGram](https://github.com/bytedance/flowgram.ai) team - providing a high-quality workflow building engine for Coze Studio's frontend workflow canvas editor\n* The [Hertz](https://github.com/cloudwego/hertz) team - Go HTTP framework with high-performance and strong-extensibility for building micro-services\n* All users who participated in testing and feedback",
    "author": "coze-dev",
    "project": "coze-studio",
    "date": "2025-10-13"
}