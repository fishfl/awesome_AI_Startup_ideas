{
    "id": "/YILING0013/AI_NovelGenerator",
    "issues": "50",
    "watch": "22",
    "fork": "440",
    "star": "2.2k",
    "topics": [],
    "license": "GNU Affero General Public License v3.0",
    "languages": [
        "Python,100.0%"
    ],
    "contributors": [
        "https://avatars.githubusercontent.com/u/115537554?s=64&v=4",
        "https://avatars.githubusercontent.com/u/154053522?s=64&v=4",
        "https://avatars.githubusercontent.com/u/60683977?s=64&v=4",
        "https://avatars.githubusercontent.com/u/15644997?s=64&v=4",
        "https://avatars.githubusercontent.com/u/80465610?s=64&v=4",
        "https://avatars.githubusercontent.com/u/17669599?s=64&v=4",
        "https://avatars.githubusercontent.com/u/120451299?s=64&v=4",
        "https://avatars.githubusercontent.com/u/4703215?s=64&v=4",
        "https://avatars.githubusercontent.com/u/4395022?s=64&v=4",
        "https://avatars.githubusercontent.com/u/17569582?s=64&v=4",
        "https://avatars.githubusercontent.com/u/63367575?s=64&v=4",
        "https://avatars.githubusercontent.com/u/78065266?s=64&v=4",
        "https://avatars.githubusercontent.com/u/109787609?s=64&v=4",
        "https://avatars.githubusercontent.com/u/200705955?s=64&v=4",
        "https://avatars.githubusercontent.com/u/215641245?s=64&v=4"
    ],
    "about": "使用ai生成多章节的长篇小说，自动衔接上下文、伏笔",
    "is_AI": "y",
    "category": "Agent/Robot",
    "summary": "```markdown\n# 📚 AI_NovelGenerator Project Analysis and Entrepreneurial Recommendations\n\n## 1. Core Content and Problems Solved\n\n**Core Concept:**  \nThis project is an automated long-form novel generation tool based on large language models (LLMs), focusing on multi-chapter, long-range coherent storytelling. By integrating prompt engineering, vector databases, state tracking, and semantic retrieval technologies, it enables end-to-end assistance in novel creation—from world-building to final chapter drafts.\n\n**Key Problems Addressed:**  \n- **Poor Long-Text Coherence**: Traditional AI writing often \"forgets\" prior plot points, leading to inconsistent character behavior and lost plot threads.\n- **Chaotic Setting Management**: Authors struggle to maintain consistency in character traits, faction relationships, and world details across hundreds of chapters.\n- **Fragmented Writing Process**: Lack of integrated tools to unify the full workflow: “worldbuilding → outline → chapters → review.”\n- **Excessive Context Dependency**: Standard models are limited by context window size, making it difficult to reference early story events.\n\n👉 Therefore, this project systematically addresses three major pain points in long-form narrative creation: **logical consistency, setting uniformity, and sustainable authorship**, enabling AI to truly generate a *complete novel* from start to finish.\n\n---\n\n## 2. Breakthroughs and Innovations\n\n### ✅ Innovative Architecture Design\n- **Staged Generation Pipeline**: Breaks writing into four phases—\"Setting → Table of Contents → Draft → Final Version\"—with human intervention at each step for quality control.\n- **State Tracking System**: Dynamically maintains metadata files like `character_state.txt` and `global_summary.txt`, simulating an \"author's memory.\"\n\n### 🔍 Long-Term Contextual Consistency\n- **Vector Retrieval Engine + Local Knowledge Base**: Uses embedding techniques to build a vector database (e.g., `vectorstore/`) that supports cross-chapter semantic search, automatically recalling key foreshadowing or character details.\n- **Automated Proofreading Mechanism**: The `consistency_checker.py` module detects plot inconsistencies (e.g., \"a deceased character reappears\"), enhancing narrative logic.\n\n### 🧩 Modular & Highly Extensible\n- Supports multiple LLM backends (OpenAI / DeepSeek / Ollama) and embedding models, compatible with both cloud and local deployment.\n- Offers a GUI workspace to lower the barrier for non-technical users.\n- Flexible configuration via `config.json` to customize genre, theme, number of chapters, word count, etc.\n\n### 💡 Engineering Mindset Focused on \"Novel-Scale\" Writing\nUnlike simple \"AI paragraph generators,\" this project targets publishable-quality novels by emphasizing:\n- Iterative refinement (draft → revision)\n- Metadata management (character arcs, plot progression)\n- Closed-loop workflow (generate → store → retrieve → regenerate)\n\n---\n\n## 3. High-Potential Startup Ideas Based on This Project\n\nHere are promising entrepreneurial directions built upon this technological foundation:\n\n### 🚀 Startup Idea 1: 【Industrialized Web Novel Production Platform】\n> Think “MidJourney + Notion for fiction writers”\n\n**Product Form:**\n- SaaS platform allowing web novelists to batch-generate first drafts\n- Team collaboration features (writers, editors, AI assistants)\n- Automatic IP derivative content generation (character profiles, world maps, side stories)\n\n**Business Model:**\n- Subscription tiers (charged per generated words/chapters)\n- IP incubation revenue sharing (platform takes cut when authors monetize)\n- B2B partnerships: Integrate with platforms like Qidian or Tomato小说 to offer AI ghostwriting services\n\n**Advantages:**\n- Addresses the urgent need of web authors facing intense daily update pressure\n- Increases productivity by 5x+, ideal for formulaic \"pleasure-read\" genres\n\n---\n\n### 🎮 Startup Idea 2: 【Interactive AI Story Game Engine】\n> “Your choices shape the story” + AI-generated dynamic narrative\n\n**Product Form:**\n- Users play as protagonists, making decisions at critical junctures\n- AI generates next chapters in real-time while maintaining long-term coherence\n- Supports player-created worlds and custom settings\n\n**Use Cases:**\n- Mobile games/apps: Immersive text-based adventures\n- Education: Personalized reading comprehension exercises\n- Mental wellness: Custom narrative therapy experiences\n\n**Technical Extension:**\n- Leverages the project’s vector retrieval and state tracking to ensure consistent gameplay even after 100+ hours\n\n---\n\n### 🌐 Startup Idea 3: 【AI Fanfiction Factory】\n> Input “characters + universe” → one-click high-quality fanfiction\n\n**Target Market:**\n- Fans of Genshin Impact, Honkai Star Rail, Harry Potter, Marvel, etc.\n- Doujinshi conventions, AO3 alternatives, fan economy monetization\n\n**Key Features:**\n- Built-in templates for popular IPs (with automatic filtering for sensitive content)\n- Modes like “CP pairing,” “dark alternate versions,” “crossover universes”\n- Export options: printable PDFs, audiobook-ready scripts\n\n**Revenue Streams:**\n- Community tip-sharing model\n- Premium custom generation\n- Official collaborations: Licensed “authorized fan packs”\n\n---\n\n### 📖 Startup Idea 4: 【AI Children's Literature Assistant】\n> Help parents/teachers create personalized fairy tales\n\n**Unique Features:**\n- Generate stories using child’s name, personality, and interests\n- Control reading level (age-appropriate) and values (non-violent, positive messaging)\n- Auto-generate image prompts for integration with Stable Diffusion\n\n**Distribution Channels:**\n- Partnerships with educational institutions\n- Integration into early-learning apps\n- Publish limited-edition illustrated books (custom keepsakes)\n\n---\n\n## Summary\n\n| Dimension | Evaluation |\n|---------|------------|\n| Technical Depth | ⭐⭐⭐⭐☆ (Strong engineering approach) |\n| Commercial Potential | ⭐⭐⭐⭐⭐ (Multiple viable markets) |\n| Usability Barrier | ⭐⭐☆☆☆ (Requires some technical setup) |\n| Current Status | Prototype functional, ready for commercial refactoring |\n\n💡 **Recommendations for Future Development:**\n- Refactor into a Web-based SaaS platform (Vue frontend + FastAPI backend)\n- Add user accounts, story libraries, and version control\n- Open API access to encourage third-party integrations\n\n> This isn’t just another tool—it’s a key to unlocking the era of *AI-native storytelling*. Whoever masters automated long-form narrative generation may become the infrastructure provider for the next generation of content ecosystems.\n```",
    "text": "📖 自动小说生成工具\n当前没有什么精力维护该项目，本身该项目并无任何收益，以及临近毕业，有很多内容要忙，如果后面有时间的话，再考虑基于更新的技术去重构吧。——2025/9/24\n✨\n核心功能\n✨\n功能模块\n关键能力\n🎨 小说设定工坊\n世界观架构 / 角色设定 / 剧情蓝图\n📖 智能章节生成\n多阶段生成保障剧情连贯性\n🧠 状态追踪系统\n角色发展轨迹 / 伏笔管理系统\n🔍 语义检索引擎\n基于向量的长程上下文一致性维护\n📚 知识库集成\n支持本地文档参考\n✅ 自动审校机制\n检测剧情矛盾与逻辑冲突\n🖥 可视化工作台\n全流程GUI操作，配置/生成/审校一体化\n一款基于大语言模型的多功能小说生成器，助您高效创作逻辑严谨、设定统一的长篇故事\n📑 目录导航\n环境准备\n项目架构\n配置指南\n运行说明\n使用教程\n疑难解答\n🛠 环境准备\n确保满足以下运行条件：\nPython 3.9+\n运行环境（推荐3.10-3.12之间）\npip\n包管理工具\n有效API密钥：\n云端服务：OpenAI / DeepSeek 等\n本地服务：Ollama 等兼容 OpenAI 的接口\n📥 安装说明\n下载项目\n通过\nGitHub\n下载项目 ZIP 文件，或使用以下命令克隆本项目：\ngit clone https://github.com/YILING0013/AI_NovelGenerator\n安装编译工具（可选）\n如果对某些包无法正常安装，访问\nVisual Studio Build Tools\n下载并安装C++编译工具，用于构建部分模块包；\n安装时，默认只包含 MSBuild 工具，需手动勾选左上角列表栏中的\nC++ 桌面开发\n选项。\n安装依赖并运行\n打开终端，进入项目源文件目录：\ncd\nAI_NovelGenerator\n安装项目依赖：\npip install -r requirements.txt\n安装完成后，运行主程序：\npython main.py\n如果缺失部分依赖，后续\n手动执行\npip install XXX\n进行安装即可\n🗂 项目架构\nnovel-generator/\n├── main.py                      # 入口文件, 运行 GUI\n├── consistency_checker.py       # 一致性检查, 防止剧情冲突\n|—— chapter_directory_parser.py  # 目录解析\n|—— embedding_adapters.py        # Embedding 接口封装\n|—— llm_adapters.py              # LLM 接口封装\n├── prompt_definitions.py        # 定义 AI 提示词\n├── utils.py                     # 常用工具函数, 文件操作\n├── config_manager.py            # 管理配置 (API Key, Base URL)\n├── config.json                  # 用户配置文件 (可选)\n├── novel_generator/             # 章节生成核心逻辑\n├── ui/                          # 图形界面\n└── vectorstore/                 # (可选) 本地向量数据库存储\n⚙️ 配置指南\n📌 基础配置（config.json）\n{\n\"api_key\"\n:\n\"\nsk-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\"\n,\n\"base_url\"\n:\n\"\nhttps://api.openai.com/v1\n\"\n,\n\"interface_format\"\n:\n\"\nOpenAI\n\"\n,\n\"model_name\"\n:\n\"\ngpt-4o-mini\n\"\n,\n\"temperature\"\n:\n0.7\n,\n\"max_tokens\"\n:\n4096\n,\n\"embedding_api_key\"\n:\n\"\nsk-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\"\n,\n\"embedding_interface_format\"\n:\n\"\nOpenAI\n\"\n,\n\"embedding_url\"\n:\n\"\nhttps://api.openai.com/v1\n\"\n,\n\"embedding_model_name\"\n:\n\"\ntext-embedding-ada-002\n\"\n,\n\"embedding_retrieval_k\"\n:\n4\n,\n\"topic\"\n:\n\"\n星穹铁道主角星穿越到原神提瓦特大陆，拯救提瓦特大陆，并与其中的角色展开爱恨情仇的小说\n\"\n,\n\"genre\"\n:\n\"\n玄幻\n\"\n,\n\"num_chapters\"\n:\n120\n,\n\"word_number\"\n:\n4000\n,\n\"filepath\"\n:\n\"\nD:/AI_NovelGenerator/filepath\n\"\n}\n🔧 配置说明\n生成模型配置\napi_key\n: 大模型服务的API密钥\nbase_url\n: API终端地址（本地服务填Ollama等地址）\ninterface_format\n: 接口模式\nmodel_name\n: 主生成模型名称（如gpt-4, claude-3等）\ntemperature\n: 创意度参数（0-1，越高越有创造性）\nmax_tokens\n: 模型最大回复长度\nEmbedding模型配置\nembedding_model_name\n: 模型名称（如Ollama的nomic-embed-text）\nembedding_url\n: 服务地址\nembedding_retrieval_k\n:\n小说参数配置\ntopic\n: 核心故事主题\ngenre\n: 作品类型\nnum_chapters\n: 总章节数\nword_number\n: 单章目标字数\nfilepath\n: 生成文件存储路径\n🚀 运行说明\n方式 1：使用 Python 解释器\npython main.py\n执行后，GUI 将会启动，你可以在图形界面中进行各项操作。\n方式 2：打包为可执行文件\n如果你想在无 Python 环境的机器上使用本工具，可以使用\nPyInstaller\n进行打包：\npip install pyinstaller\npyinstaller main.spec\n打包完成后，会在\ndist/\n目录下生成可执行文件（如 Windows 下的\nmain.exe\n）。\n📘 使用教程\n启动后，先完成基本参数设置：\nAPI Key & Base URL\n（如\nhttps://api.openai.com/v1\n）\n模型名称\n（如\ngpt-3.5-turbo\n、\ngpt-4o\n等）\nTemperature\n(0~1，决定文字创意程度)\n主题(Topic)\n（如 “废土世界的 AI 叛乱”）\n类型(Genre)\n（如 “科幻”/“魔幻”/“都市幻想”）\n章节数\n、\n每章字数\n（如 10 章，每章约 3000 字）\n保存路径\n（建议创建一个新的输出文件夹）\n点击「Step1. 生成设定」\n系统将基于主题、类型、章节数等信息，生成：\nNovel_setting.txt\n：包含世界观、角色信息、雷点暗线等。\n可以在生成后的\nNovel_setting.txt\n中查看或修改设定内容。\n点击「Step2. 生成目录」\n系统会根据已完成的\nNovel_setting.txt\n内容，为全部章节生成：\nNovel_directory.txt\n：包括每章标题和简要提示。\n可以在生成后的文件中查看、修改或补充章节标题和描述。\n点击「Step3. 生成章节草稿」\n在生成章节之前，你可以：\n设置章节号\n（如写第 1 章，就填\n1\n）\n在“本章指导”输入框\n中提供对本章剧情的任何期望或提示\n点击按钮后，系统将：\n自动读取前文设定、\nNovel_directory.txt\n、以及已定稿章节\n调用向量检索回顾剧情，保证上下文连贯\n生成本章大纲 (\noutline_X.txt\n) 及正文 (\nchapter_X.txt\n)\n生成完成后，你可在左侧的文本框查看、编辑本章草稿内容。\n点击「Step4. 定稿当前章节」\n系统将：\n更新全局摘要\n（写入\nglobal_summary.txt\n）\n更新角色状态\n（写入\ncharacter_state.txt\n）\n更新向量检索库\n（保证后续章节可以调用最新信息）\n更新剧情要点\n（如\nplot_arcs.txt\n）\n定稿完成后，你可以在\nchapter_X.txt\n中看到定稿后的文本。\n一致性检查（可选）\n点击「[可选] 一致性审校」按钮，对最新章节进行冲突检测，如角色逻辑、剧情前后矛盾等。\n若有冲突，会在日志区输出详细提示。\n重复第 4-6 步\n直到所有章节生成并定稿！\n向量检索配置提示\nembedding模型需要显示指定接口和模型名称；\n使用\n本地Ollama\n的\nEmbedding\n时需提前启动Ollama服务：\nollama serve\n#\n启动服务\nollama pull nomic-embed-text\n#\n下载/启用模型\n切换不同Embedding模型后建议清空vectorstore目录\n云端Embedding需确保对应API权限已开通\n❓ 疑难解答\nQ1: Expecting value: line 1 column 1 (char 0)\n该问题大概率由于API未正确响应造成，也许响应了一个html？其它内容，导致出现该报错；\nQ2: HTTP/1.1 504 Gateway Timeout？\n确认接口是否稳定；\nQ3: 如何切换不同的Embedding提供商？\n在GUI界面中对应输入即可。\n如有更多问题或需求，欢迎在\n项目 Issues\n中提出。",
    "readme": "# 📖 自动小说生成工具\n\n>- 当前没有什么精力维护该项目，本身该项目并无任何收益，以及临近毕业，有很多内容要忙，如果后面有时间的话，再考虑基于更新的技术去重构吧。——2025/9/24\n\n<div align=\"center\">\n  \n✨ **核心功能** ✨\n\n| 功能模块          | 关键能力                          |\n|-------------------|----------------------------------|\n| 🎨 小说设定工坊    | 世界观架构 / 角色设定 / 剧情蓝图   |\n| 📖 智能章节生成    | 多阶段生成保障剧情连贯性           |\n| 🧠 状态追踪系统    | 角色发展轨迹 / 伏笔管理系统         |\n| 🔍 语义检索引擎    | 基于向量的长程上下文一致性维护      |\n| 📚 知识库集成      | 支持本地文档参考         |\n| ✅ 自动审校机制    | 检测剧情矛盾与逻辑冲突          |\n| 🖥 可视化工作台    | 全流程GUI操作，配置/生成/审校一体化 |\n\n</div>\n\n> 一款基于大语言模型的多功能小说生成器，助您高效创作逻辑严谨、设定统一的长篇故事\n\n---\n\n## 📑 目录导航\n1. [环境准备](#-环境准备)  \n2. [项目架构](#-项目架构)  \n3. [配置指南](#⚙️-配置指南)  \n4. [运行说明](#🚀-运行说明)  \n5. [使用教程](#📘-使用教程)  \n6. [疑难解答](#❓-疑难解答)  \n\n---\n\n## 🛠 环境准备\n确保满足以下运行条件：\n- **Python 3.9+** 运行环境（推荐3.10-3.12之间）\n- **pip** 包管理工具\n- 有效API密钥：\n  - 云端服务：OpenAI / DeepSeek 等\n  - 本地服务：Ollama 等兼容 OpenAI 的接口\n\n---\n\n\n## 📥 安装说明\n1. **下载项目**  \n   - 通过 [GitHub](https://github.com) 下载项目 ZIP 文件，或使用以下命令克隆本项目：\n     ```bash\n     git clone https://github.com/YILING0013/AI_NovelGenerator\n     ```\n\n2. **安装编译工具（可选）**  \n   - 如果对某些包无法正常安装，访问 [Visual Studio Build Tools](https://visualstudio.microsoft.com/zh-hans/visual-cpp-build-tools/) 下载并安装C++编译工具，用于构建部分模块包；\n   - 安装时，默认只包含 MSBuild 工具，需手动勾选左上角列表栏中的 **C++ 桌面开发** 选项。\n\n3. **安装依赖并运行**  \n   - 打开终端，进入项目源文件目录：\n     ```bash\n     cd AI_NovelGenerator\n     ```\n   - 安装项目依赖：\n     ```bash\n     pip install -r requirements.txt\n     ```\n   - 安装完成后，运行主程序：\n     ```bash\n     python main.py\n     ```\n\n>如果缺失部分依赖，后续**手动执行**\n>```bash\n>pip install XXX\n>```\n>进行安装即可\n\n## 🗂 项目架构\n```\nnovel-generator/\n├── main.py                      # 入口文件, 运行 GUI\n├── consistency_checker.py       # 一致性检查, 防止剧情冲突\n|—— chapter_directory_parser.py  # 目录解析\n|—— embedding_adapters.py        # Embedding 接口封装\n|—— llm_adapters.py              # LLM 接口封装\n├── prompt_definitions.py        # 定义 AI 提示词\n├── utils.py                     # 常用工具函数, 文件操作\n├── config_manager.py            # 管理配置 (API Key, Base URL)\n├── config.json                  # 用户配置文件 (可选)\n├── novel_generator/             # 章节生成核心逻辑\n├── ui/                          # 图形界面\n└── vectorstore/                 # (可选) 本地向量数据库存储\n```\n\n---\n\n## ⚙️ 配置指南\n### 📌 基础配置（config.json）\n```json\n{\n    \"api_key\": \"sk-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n    \"base_url\": \"https://api.openai.com/v1\",\n    \"interface_format\": \"OpenAI\",\n    \"model_name\": \"gpt-4o-mini\",\n    \"temperature\": 0.7,\n    \"max_tokens\": 4096,\n    \"embedding_api_key\": \"sk-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n    \"embedding_interface_format\": \"OpenAI\",\n    \"embedding_url\": \"https://api.openai.com/v1\",\n    \"embedding_model_name\": \"text-embedding-ada-002\",\n    \"embedding_retrieval_k\": 4,\n    \"topic\": \"星穹铁道主角星穿越到原神提瓦特大陆，拯救提瓦特大陆，并与其中的角色展开爱恨情仇的小说\",\n    \"genre\": \"玄幻\",\n    \"num_chapters\": 120,\n    \"word_number\": 4000,\n    \"filepath\": \"D:/AI_NovelGenerator/filepath\"\n}\n```\n\n### 🔧 配置说明\n1. **生成模型配置**\n   - `api_key`: 大模型服务的API密钥\n   - `base_url`: API终端地址（本地服务填Ollama等地址）\n   - `interface_format`: 接口模式\n   - `model_name`: 主生成模型名称（如gpt-4, claude-3等）\n   - `temperature`: 创意度参数（0-1，越高越有创造性）\n   - `max_tokens`: 模型最大回复长度\n\n2. **Embedding模型配置**\n   - `embedding_model_name`: 模型名称（如Ollama的nomic-embed-text）\n   - `embedding_url`: 服务地址\n   - `embedding_retrieval_k`: \n\n3. **小说参数配置**\n   - `topic`: 核心故事主题\n   - `genre`: 作品类型\n   - `num_chapters`: 总章节数\n   - `word_number`: 单章目标字数\n   - `filepath`: 生成文件存储路径\n\n---\n\n## 🚀 运行说明\n### **方式 1：使用 Python 解释器**\n```bash\npython main.py\n```\n执行后，GUI 将会启动，你可以在图形界面中进行各项操作。\n\n### **方式 2：打包为可执行文件**\n如果你想在无 Python 环境的机器上使用本工具，可以使用 **PyInstaller** 进行打包：\n\n```bash\npip install pyinstaller\npyinstaller main.spec\n```\n打包完成后，会在 `dist/` 目录下生成可执行文件（如 Windows 下的 `main.exe`）。\n\n---\n\n## 📘 使用教程\n1. **启动后，先完成基本参数设置：**  \n   - **API Key & Base URL**（如 `https://api.openai.com/v1`）  \n   - **模型名称**（如 `gpt-3.5-turbo`、`gpt-4o` 等）  \n   - **Temperature** (0~1，决定文字创意程度)  \n   - **主题(Topic)**（如 “废土世界的 AI 叛乱”）  \n   - **类型(Genre)**（如 “科幻”/“魔幻”/“都市幻想”）  \n   - **章节数**、**每章字数**（如 10 章，每章约 3000 字）  \n   - **保存路径**（建议创建一个新的输出文件夹）\n\n2. **点击「Step1. 生成设定」**  \n   - 系统将基于主题、类型、章节数等信息，生成：  \n     - `Novel_setting.txt`：包含世界观、角色信息、雷点暗线等。  \n   - 可以在生成后的 `Novel_setting.txt` 中查看或修改设定内容。\n\n3. **点击「Step2. 生成目录」**  \n   - 系统会根据已完成的 `Novel_setting.txt` 内容，为全部章节生成：  \n     - `Novel_directory.txt`：包括每章标题和简要提示。  \n   - 可以在生成后的文件中查看、修改或补充章节标题和描述。\n\n4. **点击「Step3. 生成章节草稿」**  \n   - 在生成章节之前，你可以：  \n     - **设置章节号**（如写第 1 章，就填 `1`）  \n     - **在“本章指导”输入框**中提供对本章剧情的任何期望或提示  \n   - 点击按钮后，系统将：  \n     - 自动读取前文设定、`Novel_directory.txt`、以及已定稿章节  \n     - 调用向量检索回顾剧情，保证上下文连贯  \n     - 生成本章大纲 (`outline_X.txt`) 及正文 (`chapter_X.txt`)  \n   - 生成完成后，你可在左侧的文本框查看、编辑本章草稿内容。\n\n5. **点击「Step4. 定稿当前章节」**  \n   - 系统将：  \n     - **更新全局摘要**（写入 `global_summary.txt`）  \n     - **更新角色状态**（写入 `character_state.txt`）  \n     - **更新向量检索库**（保证后续章节可以调用最新信息）  \n     - **更新剧情要点**（如 `plot_arcs.txt`）  \n   - 定稿完成后，你可以在 `chapter_X.txt` 中看到定稿后的文本。\n\n6. **一致性检查（可选）**  \n   - 点击「[可选] 一致性审校」按钮，对最新章节进行冲突检测，如角色逻辑、剧情前后矛盾等。  \n   - 若有冲突，会在日志区输出详细提示。\n\n7. **重复第 4-6 步** 直到所有章节生成并定稿！\n\n> **向量检索配置提示**  \n> 1. embedding模型需要显示指定接口和模型名称；\n> 2. 使用**本地Ollama**的**Embedding**时需提前启动Ollama服务：  \n>    ```bash\n>    ollama serve  # 启动服务\n>    ollama pull nomic-embed-text  # 下载/启用模型\n>    ```\n> 3. 切换不同Embedding模型后建议清空vectorstore目录\n> 4. 云端Embedding需确保对应API权限已开通\n\n---\n\n## ❓ 疑难解答\n### Q1: Expecting value: line 1 column 1 (char 0)\n\n该问题大概率由于API未正确响应造成，也许响应了一个html？其它内容，导致出现该报错；\n\n\n### Q2: HTTP/1.1 504 Gateway Timeout？\n确认接口是否稳定；\n\n### Q3: 如何切换不同的Embedding提供商？\n在GUI界面中对应输入即可。\n\n---\n\n如有更多问题或需求，欢迎在**项目 Issues** 中提出。\n",
    "author": "YILING0013",
    "project": "AI_NovelGenerator",
    "date": "2025-10-03"
}