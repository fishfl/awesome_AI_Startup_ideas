{
    "id": "/WECENG/ticket-purchase",
    "issues": "39",
    "watch": "9",
    "fork": "375",
    "star": "2.6k",
    "topics": [],
    "license": "",
    "languages": [
        "Python,100.0%"
    ],
    "contributors": [],
    "about": "大麦自动抢票，支持人员、城市、日期场次、价格选择",
    "is_AI": "n",
    "category": "Web Crawlers",
    "summary": "```markdown\n# Dawang Automatic Ticket Grabbing Script Project Analysis\n\n## 1. Core Content and Problems Solved\n\nThis project is an automated ticket-purchasing tool based on **Selenium** and **Appium**, designed to enable users to efficiently and instantly secure concert or event tickets on Dawang.cn (Damai.cn) or the Dawang mobile app.\n\n### Key Problems Addressed:\n- **Slow manual purchasing with low success rate**: Tickets for popular events often sell out within seconds of release, making it nearly impossible for regular users to complete login, seat selection, and order submission manually in time.\n- **Difficulty filtering complex purchase conditions**: Users must simultaneously select multiple parameters (e.g., city, date/session, price tier, attendees), which is error-prone and tedious when done manually.\n- **Need for cross-platform support**: Web and mobile platforms have different purchasing rules; this project offers dual solutions—web automation via Selenium and mobile automation via Appium.\n\nBy simulating real user behavior through automated scripts, the tool enables one-click execution from login to checkout, significantly improving efficiency and ticket acquisition success rates.\n\n---\n\n## 2. Breakthroughs and Innovations\n\n### Key Innovations:\n- ✅ **Highly Configurable**: Flexible settings via `config.json` file for target event URL, attendees, city, date, price tiers, etc., meeting personalized ticketing needs.\n- ✅ **Supports Multi-Condition Filtering**: Allows simultaneous specification of multiple dates and price levels; the system automatically selects the first matching option, increasing chances of securing ideal seats.\n- ✅ **Dual Platform Support (Web + App)**: Offers both PC browser automation (Selenium) and mobile app automation (Appium), adapting to anti-bot mechanisms across platforms.\n- ✅ **Near \"Zero-Latency\" Ticket Grabbing Experience**: Pre-loads pages, maintains logged-in status, and rapidly clicks/submits orders—minimizing human delays and gaining a competitive edge in millisecond-level races.\n- ✅ **Modular Design for Easy Extension**: Separation of configuration files and code logic makes maintenance and customization easier, ideal for advanced users seeking feature extensions.\n\n> ⚠️ Note: While technically effective, such automation may violate Damai's Terms of Service and could result in account suspension.\n\n---\n\n## 3. Viable Startup Ideas Based on This Technology\n\nLeveraging the underlying principles of this project, several legally compliant and commercially viable startup directions can be developed:\n\n### 🚀 Idea 1: 【Smart Event Ticketing Assistant】SaaS Platform\n- **Target Audience**: General consumers seeking lightweight ticketing assistance (non-fully automated)\n- **Features**:\n  - Countdown reminders + one-click redirect to purchase page\n  - Auto-fill attendee information (using legally cached cookies)\n  - Real-time ticket availability monitoring with push notifications (WeChat/SMS)\n- **Revenue Model**: Subscription-based (¥9.9/month), affiliate marketing commissions\n- **Compliance Assurance**: Does not bypass CAPTCHA or simulate clicks—only provides alerts and quick access\n\n### 🎯 Idea 2: 【Fan Club Exclusive Ticket Proxy Service】\n- **Target Customers**: Artist fan clubs, supporter groups\n- **Services**:\n  - Batch ticket purchasing on behalf of groups (legally authorized orders)\n  - Ticket strategy consulting (predicting release times, identifying high-stock tiers)\n  - Data-driven analysis to forecast optimal ticket-grabbing windows\n- **Advantages**: More professional and efficient than individual efforts, building brand trust\n- **Extended Value**: Can expand into merchandise group buys, fan event planning\n\n### 💡 Idea 3: 【AI-Powered Event Intelligence Subscription Platform】\n- **Core Value**: Early access to unannounced event schedules\n- **Technical Implementation**:\n  - Scrape venue websites, artist tour calendars, and cultural bureau approvals\n  - Use NLP to analyze social media trends and predict tour cities\n  - Push “Upcoming Sale Alerts” to subscribers\n- **Business Model**:\n  - Premium intelligence packages (¥50/quarter)\n  - Referral commission partnerships with ticketing platforms\n- **Differentiation**: Not about grabbing tickets—but helping users know *when* to grab them\n\n### 🔐 Idea 4: 【Secure Ticket-Grabbing Box】Integrated Hardware-Software Device\n- **Product Form**: Mini Linux device with pre-installed ticketing system\n- **Key Selling Points**:\n  - Plug-and-play: connect to a display and start automatic ticketing\n  - Built-in anti-ban features (randomized delays, IP rotation API support)\n  - Remote control via smartphone\n- **Target Users**: Non-technical individuals with strong demand (e.g., parents buying Jay Chou concert tickets for their kids)\n- **Pricing Strategy**: Hardware + annual service model (¥499 device + ¥99/year updates & maintenance)\n\n---\n\n## Summary\n\n| Dimension | Content |\n|---------|--------|\n| **Core Value** | Solves slow, error-prone, and low-success-rate manual ticket purchasing |\n| **Technical Highlights** | Dual-engine (Selenium/Appium), intelligent multi-condition matching, high configurability |\n| **Commercial Potential** | Can evolve into information services, agency operations, or hardware products |\n| **Risk Warning** | Fully automated bots may violate platform policies—recommend shifting toward \"assisted\" tools |\n\n📌 **Recommended Direction**: Avoid direct confrontation with platform anti-bot systems using \"fully automated scripts.\" Instead, pivot toward **information arbitrage, user experience enhancement, and community-driven operations**—developing sustainable, compliant products within the cultural entertainment ecosystem.\n```",
    "text": "大麦抢票脚本 V1.0\n特征\n自动无延时抢票\n支持人员、城市、日期场次、价格选择\n功能介绍\n通过selenium打开页面进行登录，模拟用户购票流程自动购票\n其流程图如下:\n准备工作\n1. 配置环境\n1.1安装python3环境\nWindows\n访问Python官方网站：\nhttps://www.python.org/downloads/windows/\n下载最新的Python 3.9+版本的安装程序。\n运行安装程序。\n在安装程序中，确保勾选 \"Add Python X.X to PATH\" 选项，这将自动将Python添加到系统环境变量中，方便在命令行中使用Python。\n完成安装后，你可以在命令提示符或PowerShell中输入\npython3\n来启动Python解释器。\nmacOS\n你可以使用Homebrew来安装Python 3。\n安装Homebrew（如果未安装）：打开终端并运行以下命令：\n/bin/bash -c\n\"\n$(\ncurl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh\n)\n\"\n安装Python 3：运行以下命令来安装Python 3：\nbrew install python@3\n1.2 安装所需要的环境\n在命令窗口输入如下指令\npip3 install selenium\n1.3 下载google chrome浏览器\n下载地址:\nhttps://www.google.cn/intl/zh-CN/chrome/?brand=YTUH&gclid=Cj0KCQjwj5mpBhDJARIsAOVjBdoV_1sBwdqKGHV3rUU1vJmNKZdy5QNzbRT8F5O0-_jq1WHXurE8a7MaAkWrEALw_wcB&gclsrc=aw.ds\n2. 修改配置文件\n在运行程序之前，需要先修改\nconfig.json\n文件。该文件用于指定用户需要抢票的相关信息，包括演唱会的场次、观演的人员、城市、日期、价格等。文件结果如下图所示：\n2.1 文件内容说明\nindex_url\n为大麦网的地址，\n无需修改\nlogin_url\n为大麦网的登录地址，\n无需修改\ntarget_url\n为用户需要抢的演唱会票的目标地址，\n待修改\nusers\n为观演人的姓名，\n观演人需要用户在手机大麦APP中先填写好，然后再填入该配置文件中\n，\n待修改\ncity\n为城市，\n如果用户需要抢的演唱会票需要选择城市，请把城市填入此处。如无需选择，则不填\ndate\n为场次日期，\n待修改，可多选\nprice\n为票档的价格，\n待修改，可多选\nif_commit_order\n为是否要自动提交订单，\n改成 true\nif_listen为是否回流监听，\n改成true\n2.2 示例说明\n进入大麦网\nhttps://www.damai.cn/，选择你需要抢票的演唱会。假设如下图所示：\n接下来按照下图的标注对配置文件进行修改：\n最终\nconfig.json\n的文件内容如下：\n{\n\"index_url\"\n:\n\"\nhttps://www.damai.cn/\n\"\n,\n\"login_url\"\n:\n\"\nhttps://passport.damai.cn/login?ru=https%3A%2F%2Fwww.damai.cn%2F\n\"\n,\n\"target_url\"\n:\n\"\nhttps://detail.damai.cn/item.htm?spm=a2oeg.home.card_0.ditem_1.591b23e1JQGWHg&id=740680932762\n\"\n,\n\"users\"\n: [\n\"\n名字1\n\"\n,\n\"\n名字2\n\"\n],\n\"city\"\n:\n\"\n广州\n\"\n,\n\"date\"\n:\n\"\n2023-10-28\n\"\n,\n\"price\"\n:\n\"\n1039\n\"\n,\n\"if_listen\"\n:\ntrue\n,\n\"if_commit_order\"\n:\ntrue\n}\n3.运行程序\n运行程序开始抢票，进入命令窗口，执行如下命令：\ncd\ndamai\npython3 damai.py\n大麦app抢票\n大麦app抢票脚本需要依赖appium，因此需要现在安装appium server&client环境，步骤如下：\nappium server\n下载\n先安装好node环境（具备npm）node版本号18.0.0\n先下载并安装好android sdk，并配置环境变量（appium server运行需依赖android sdk)\n下载appium\nnpm install -g appium\n查看appium是否安装成功\nappium -v\n下载UiAutomator2驱动\nnpm install appium-uiautomator2-driver\n​\t\t可能会遇到如下错误：\n➜  xcode git:(master) ✗ npm install appium-uiautomator2-driver\n\nnpm ERR! code 1\nnpm ERR! path /Users/chenweicheng/Documents/xcode/node_modules/appium-uiautomator2-driver/node_modules/appium-chromedriver\nnpm ERR! command failed\nnpm ERR! command sh -c node install-npm.js\nnpm ERR! [11:57:54] Error installing Chromedriver: Request failed with status code 404\nnpm ERR! [11:57:54] AxiosError: Request failed with status code 404\nnpm ERR!     at settle (/Users/chenweicheng/Documents/xcode/node_modules/appium-uiautomator2-driver/node_modules/axios/lib/core/settle.js:19:12)\nnpm ERR!     at IncomingMessage.handleStreamEnd (/Users/chenweicheng/Documents/xcode/node_modules/appium-uiautomator2-driver/node_modules/axios/lib/adapters/http.js:572:11)\nnpm ERR!     at IncomingMessage.emit (node:events:539:35)\nnpm ERR!     at endReadableNT (node:internal/streams/readable:1344:12)\nnpm ERR!     at processTicksAndRejections (node:internal/process/task_queues:82:21)\nnpm ERR! [11:57:54] Downloading Chromedriver can be skipped by setting the'APPIUM_SKIP_CHROMEDRIVER_INSTALL' environment variable.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/chenweicheng/.npm/_logs/2023-10-26T03_57_35_950Z-debug-0.log\n​\t\t解决办法（添加环境变量，错误原因是没有找到chrome浏览器驱动，忽略即可）\nexport\nAPPIUM_SKIP_CHROMEDRIVER_INSTALL=true\n启动\n启动appium server并使用uiautomator2驱动\nappium --use-plugins uiautomator2\n启动成功将出现如下信息：\n[Appium] Welcome to Appium v2.2.1 (REV 2176894a5be5da17a362bf3f20678641a78f4b69)\n[Appium] Non-default server args:\n[Appium] {\n[Appium]   usePlugins: [\n[Appium]     'uiautomator2'\n[Appium]   ]\n[Appium] }\n[Appium] Attempting to load driver uiautomator2...\n[Appium] Requiring driver at /Users/chenweicheng/Documents/xcode/node_modules/appium-uiautomator2-driver\n[Appium] Appium REST http interface listener started on http://0.0.0.0:4723\n[Appium] You can provide the following URLs in your client code to connect to this server:\n[Appium] \thttp://127.0.0.1:4723/ (only accessible from the same host)\n[Appium] \thttp://172.31.102.45:4723/\n[Appium] \thttp://198.18.0.1:4723/\n[Appium] Available drivers:\n[Appium]   - uiautomator2@2.32.3 (automationName 'UiAutomator2')\n[Appium] No plugins have been installed. Use the \"appium plugin\" command to install the one(s) you want to use.\n其中\n[Appium] \thttp://127.0.0.1:4723/ (only accessible from the same host) [Appium] \thttp://172.31.102.45:4723/ [Appium] \thttp://198.18.0.1:4723/\n为appium server连接地址\nappium client\n先下载并安装好python3和pip3\n安装\npip3 install appium-python-client\n在代码中引入并使用appium\nfrom\nappium\nimport\nwebdriver\nfrom\nappium\n.\noptions\n.\ncommon\n.\nbase\nimport\nAppiumOptions\ndevice_app_info\n=\nAppiumOptions\n()\ndevice_app_info\n.\nset_capability\n(\n'platformName'\n,\n'Android'\n)\ndevice_app_info\n.\nset_capability\n(\n'platformVersion'\n,\n'10'\n)\ndevice_app_info\n.\nset_capability\n(\n'deviceName'\n,\n'YourDeviceName'\n)\ndevice_app_info\n.\nset_capability\n(\n'appPackage'\n,\n'cn.damai'\n)\ndevice_app_info\n.\nset_capability\n(\n'appActivity'\n,\n'.launcher.splash.SplashMainActivity'\n)\ndevice_app_info\n.\nset_capability\n(\n'unicodeKeyboard'\n,\nTrue\n)\ndevice_app_info\n.\nset_capability\n(\n'resetKeyboard'\n,\nTrue\n)\ndevice_app_info\n.\nset_capability\n(\n'noReset'\n,\nTrue\n)\ndevice_app_info\n.\nset_capability\n(\n'newCommandTimeout'\n,\n6000\n)\ndevice_app_info\n.\nset_capability\n(\n'automationName'\n,\n'UiAutomator2'\n)\n# 连接appium server，server地址查看appium启动信息\ndriver\n=\nwebdriver\n.\nRemote\n(\n'http://127.0.0.1:4723'\n,\noptions\n=\ndevice_app_info\n)\n启动脚本程序\ncd\ndamai_appium\npython3 damai_appium.py",
    "readme": "# 大麦抢票脚本 V1.0\n### 特征\n\n- 自动无延时抢票\n- 支持人员、城市、日期场次、价格选择\n\n## 功能介绍\n通过selenium打开页面进行登录，模拟用户购票流程自动购票\n\n其流程图如下:\n\n<img src=\"https://raw.githubusercontent.com/WECENG/ticket-purchase/main/img/大麦抢票流程.png\" width=\"50%\" height=\"50%\" />\n\n## 准备工作\n### 1. 配置环境\n\n#### 1.1安装python3环境\n\n**Windows**\n\n1. 访问Python官方网站：https://www.python.org/downloads/windows/\n2. 下载最新的Python 3.9+版本的安装程序。\n3. 运行安装程序。\n4. 在安装程序中，确保勾选 \"Add Python X.X to PATH\" 选项，这将自动将Python添加到系统环境变量中，方便在命令行中使用Python。\n5. 完成安装后，你可以在命令提示符或PowerShell中输入 `python3` 来启动Python解释器。\n\n**macOS**\n\n1. 你可以使用Homebrew来安装Python 3。\n\n   - 安装Homebrew（如果未安装）：打开终端并运行以下命令：\n\n     ```shell\n     /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n     ```\n\n   - 安装Python 3：运行以下命令来安装Python 3：\n\n     ```shell\n     brew install python@3\n     ```\n\n#### 1.2 安装所需要的环境\n\n在命令窗口输入如下指令\n\n```shell\npip3 install selenium\n```\n\n#### 1.3 下载google chrome浏览器\n\n下载地址: https://www.google.cn/intl/zh-CN/chrome/?brand=YTUH&gclid=Cj0KCQjwj5mpBhDJARIsAOVjBdoV_1sBwdqKGHV3rUU1vJmNKZdy5QNzbRT8F5O0-_jq1WHXurE8a7MaAkWrEALw_wcB&gclsrc=aw.ds\n\n### 2. 修改配置文件\n\n在运行程序之前，需要先修改`config.json`文件。该文件用于指定用户需要抢票的相关信息，包括演唱会的场次、观演的人员、城市、日期、价格等。文件结果如下图所示：\n\n<img src=\"https://raw.githubusercontent.com/WECENG/ticket-purchase/main/img/config_json.png\" width=\"50%\" height=\"50%\" />\n\n#### 2.1 文件内容说明\n\n- `index_url`为大麦网的地址，**无需修改**\n- `login_url`为大麦网的登录地址，**无需修改**\n- `target_url`为用户需要抢的演唱会票的目标地址，**待修改**\n- `users`为观演人的姓名，**观演人需要用户在手机大麦APP中先填写好，然后再填入该配置文件中**，**待修改**\n- `city`为城市，**如果用户需要抢的演唱会票需要选择城市，请把城市填入此处。如无需选择，则不填**\n- `date`为场次日期，**待修改，可多选**\n- `price`为票档的价格，**待修改，可多选**\n- `if_commit_order`为是否要自动提交订单，**改成 true**\n- if_listen为是否回流监听，**改成true**\n\n\n\n#### 2.2 示例说明\n\n进入大麦网https://www.damai.cn/，选择你需要抢票的演唱会。假设如下图所示：\n\n<img src=\"https://raw.githubusercontent.com/WECENG/ticket-purchase/main/img/example.png\" width=\"50%\" height=\"50%\" />\n\n接下来按照下图的标注对配置文件进行修改：\n\n<img src=\"https://raw.githubusercontent.com/WECENG/ticket-purchase/main/img/example_detail.png\" width=\"50%\" height=\"50%\" />\n\n最终`config.json`的文件内容如下：\n\n```json\n{\n  \"index_url\": \"https://www.damai.cn/\",\n  \"login_url\": \"https://passport.damai.cn/login?ru=https%3A%2F%2Fwww.damai.cn%2F\",\n  \"target_url\": \"https://detail.damai.cn/item.htm?spm=a2oeg.home.card_0.ditem_1.591b23e1JQGWHg&id=740680932762\",\n  \"users\": [\n    \"名字1\",\n    \"名字2\"\n  ],\n  \"city\": \"广州\",\n  \"date\": \"2023-10-28\",\n  \"price\": \"1039\",\n  \"if_listen\":true,\n  \"if_commit_order\": true\n}\n```\n\n\n\n### 3.运行程序\n\n运行程序开始抢票，进入命令窗口，执行如下命令：\n\n```shell\ncd damai\npython3 damai.py\n```\n\n\n\n# 大麦app抢票\n\n大麦app抢票脚本需要依赖appium，因此需要现在安装appium server&client环境，步骤如下：\n\n## appium server\n\n### 下载\n\n- 先安装好node环境（具备npm）node版本号18.0.0\n\n- 先下载并安装好android sdk，并配置环境变量（appium server运行需依赖android sdk)\n\n- 下载appium\n\n  ```shell\n  npm install -g appium\n  ```\n\n- 查看appium是否安装成功\n\n  ```shell\n  appium -v\n  ```\n\n- 下载UiAutomator2驱动\n\n  ```shell\n  npm install appium-uiautomator2-driver\n  ```\n\n​\t\t可能会遇到如下错误：\n\n```tex\n➜  xcode git:(master) ✗ npm install appium-uiautomator2-driver\n\nnpm ERR! code 1\nnpm ERR! path /Users/chenweicheng/Documents/xcode/node_modules/appium-uiautomator2-driver/node_modules/appium-chromedriver\nnpm ERR! command failed\nnpm ERR! command sh -c node install-npm.js\nnpm ERR! [11:57:54] Error installing Chromedriver: Request failed with status code 404\nnpm ERR! [11:57:54] AxiosError: Request failed with status code 404\nnpm ERR!     at settle (/Users/chenweicheng/Documents/xcode/node_modules/appium-uiautomator2-driver/node_modules/axios/lib/core/settle.js:19:12)\nnpm ERR!     at IncomingMessage.handleStreamEnd (/Users/chenweicheng/Documents/xcode/node_modules/appium-uiautomator2-driver/node_modules/axios/lib/adapters/http.js:572:11)\nnpm ERR!     at IncomingMessage.emit (node:events:539:35)\nnpm ERR!     at endReadableNT (node:internal/streams/readable:1344:12)\nnpm ERR!     at processTicksAndRejections (node:internal/process/task_queues:82:21)\nnpm ERR! [11:57:54] Downloading Chromedriver can be skipped by setting the'APPIUM_SKIP_CHROMEDRIVER_INSTALL' environment variable.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/chenweicheng/.npm/_logs/2023-10-26T03_57_35_950Z-debug-0.log\n```\n\n​\t\t解决办法（添加环境变量，错误原因是没有找到chrome浏览器驱动，忽略即可）\n\n```shell\nexport APPIUM_SKIP_CHROMEDRIVER_INSTALL=true\n```\n\n### 启动\n\n启动appium server并使用uiautomator2驱动\n\n```shell\nappium --use-plugins uiautomator2\n```\n\n启动成功将出现如下信息：\n\n```\n[Appium] Welcome to Appium v2.2.1 (REV 2176894a5be5da17a362bf3f20678641a78f4b69)\n[Appium] Non-default server args:\n[Appium] {\n[Appium]   usePlugins: [\n[Appium]     'uiautomator2'\n[Appium]   ]\n[Appium] }\n[Appium] Attempting to load driver uiautomator2...\n[Appium] Requiring driver at /Users/chenweicheng/Documents/xcode/node_modules/appium-uiautomator2-driver\n[Appium] Appium REST http interface listener started on http://0.0.0.0:4723\n[Appium] You can provide the following URLs in your client code to connect to this server:\n[Appium] \thttp://127.0.0.1:4723/ (only accessible from the same host)\n[Appium] \thttp://172.31.102.45:4723/\n[Appium] \thttp://198.18.0.1:4723/\n[Appium] Available drivers:\n[Appium]   - uiautomator2@2.32.3 (automationName 'UiAutomator2')\n[Appium] No plugins have been installed. Use the \"appium plugin\" command to install the one(s) you want to use.\n```\n\n其中`[Appium] \thttp://127.0.0.1:4723/ (only accessible from the same host)\n[Appium] \thttp://172.31.102.45:4723/\n[Appium] \thttp://198.18.0.1:4723/`为appium server连接地址\n\n\n\n## appium client\n\n- 先下载并安装好python3和pip3\n\n- 安装\n\n  ```shell\n  pip3 install appium-python-client\n  ```\n\n- 在代码中引入并使用appium\n\n  ```python\n  from appium import webdriver\n  from appium.options.common.base import AppiumOptions\n  \n  device_app_info = AppiumOptions()\n  device_app_info.set_capability('platformName', 'Android')\n  device_app_info.set_capability('platformVersion', '10')\n  device_app_info.set_capability('deviceName', 'YourDeviceName')\n  device_app_info.set_capability('appPackage', 'cn.damai')\n  device_app_info.set_capability('appActivity', '.launcher.splash.SplashMainActivity')\n  device_app_info.set_capability('unicodeKeyboard', True)\n  device_app_info.set_capability('resetKeyboard', True)\n  device_app_info.set_capability('noReset', True)\n  device_app_info.set_capability('newCommandTimeout', 6000)\n  device_app_info.set_capability('automationName', 'UiAutomator2')\n  \n  # 连接appium server，server地址查看appium启动信息\n  driver = webdriver.Remote('http://127.0.0.1:4723', options=device_app_info)\n  \n  ```\n\n- 启动脚本程序\n\n  ```shell\n  cd damai_appium\n  python3 damai_appium.py\n  ```\n\n  \n\n",
    "author": "WECENG",
    "project": "ticket-purchase",
    "date": "2025-09-22"
}