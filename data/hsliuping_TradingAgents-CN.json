{
    "id": "/hsliuping/TradingAgents-CN",
    "issues": "109",
    "watch": "95",
    "fork": "1.9k",
    "star": "7.7k",
    "topics": [],
    "license": "Apache License 2.0",
    "languages": [
        "Python,96.0%",
        "PowerShell,2.6%"
    ],
    "contributors": [
        "https://avatars.githubusercontent.com/u/128790537?s=64&v=4",
        "https://avatars.githubusercontent.com/u/48253104?s=64&v=4",
        "https://avatars.githubusercontent.com/u/68405458?s=64&v=4",
        "https://avatars.githubusercontent.com/u/46982469?s=64&v=4",
        "https://avatars.githubusercontent.com/u/62582492?s=64&v=4",
        "https://avatars.githubusercontent.com/u/115389416?s=64&v=4",
        "https://avatars.githubusercontent.com/u/230689?s=64&v=4",
        "https://avatars.githubusercontent.com/u/4461127?s=64&v=4",
        "https://avatars.githubusercontent.com/u/8122144?s=64&v=4",
        "https://avatars.githubusercontent.com/u/13556390?s=64&v=4",
        "https://avatars.githubusercontent.com/u/21223072?s=64&v=4",
        "https://avatars.githubusercontent.com/u/29805178?s=64&v=4",
        "https://avatars.githubusercontent.com/u/34427207?s=64&v=4",
        "https://avatars.githubusercontent.com/u/101440647?s=64&v=4"
    ],
    "about": "基于多智能体LLM的中文金融交易框架 - TradingAgents中文增强版",
    "is_AI": "y",
    "category": "Quantitative Trading Platforms/Tools",
    "summary": "```markdown\n# TradingAgents Chinese Enhanced Edition Project Analysis\n\n## 1. Core Content and Problems Solved\n\n**Core Content:**  \nThe TradingAgents Chinese Enhanced Edition is a **Chinese-language financial trading decision framework** based on multi-agent large language models (LLMs), specifically designed for the A-share, Hong Kong, and U.S. stock markets. It employs multiple AI agents to collaboratively perform stock analysis across technical indicators, fundamentals, news sentiment, and social media inputs, ultimately generating professional investment recommendation reports.\n\n**Key Problems Addressed:**\n- **Language and Localization Barriers**: The original TradingAgents was English-centric and lacked support for Chinese financial terminology and data from A/H-share markets. This project delivers full Chinese localization of both interface and analytical workflows, filling a critical gap in AI-powered financial tools for Chinese-speaking users.\n- **Lack of Domestic Model Integration**: The original system did not support major Chinese LLMs such as Alibaba’s Qwen, Baidu’s Qianfan, or DeepSeek. This version fully integrates leading domestic LLM providers, enhancing accessibility and regulatory compliance.\n- **Fragmented User Experience**: The original system lacked visual progress tracking, report export capabilities, and user permission management. This project introduces a modern web interface (Streamlit) with real-time analysis monitoring, one-click PDF/Word report exports, Docker deployment, and other enterprise-grade features.\n- **Information Overload and Noise**: Traditional financial analysis suffers from inconsistent news quality. The project introduces an \"Intelligent News Filter\" that uses AI to assess relevance and credibility of news sources, significantly improving input data quality.\n\n---\n\n## 2. Breakthroughs and Innovations\n\n### ✅ Technical Architecture Innovations:\n- **Multi-Agent Debate Mechanism**: Implements structured debates between \"Bullish Analyst\" and \"Bearish Analyst\" agents, with a \"Trader\" agent synthesizing insights to make final investment decisions—mimicking real-world research team dynamics.\n- **Native OpenAI-Compatible Interface + Multi-Vendor Adapters**: Supports custom API endpoints (e.g., private model deployments) and unified access to 60+ models across platforms like Google AI, DashScope, DeepSeek, and OpenRouter, enabling flexible switching and cost optimization.\n- **Smart Fallback & Caching Strategy**: Employs a three-tier caching system (Redis + MongoDB + local files) that automatically degrades during network or service outages, ensuring system stability and responsiveness.\n\n### ✅ Functional Advancements:\n- **Intelligent News Analysis System (v0.1.12)**: Introduces a three-stage filtering mechanism (Basic → Enhanced → Integrated) that leverages AI scoring to eliminate low-quality, redundant, or irrelevant content, greatly improving analytical accuracy.\n- **Persistent Model Selection & URL Parameter Saving**: User configurations can be shared via URL and preserved after page refreshes, dramatically improving usability.\n- **Real-Time Progress Visualization**: Dynamically displays analysis stages (e.g., “Fetching Financial Reports,” “Calculating Technical Indicators”) with estimated completion times, eliminating the \"black box\" experience.\n- **One-Click Professional Report Export**: Generates investment reports in Markdown, Word, and PDF formats, complete with quantified metrics such as confidence scores, risk ratings, and target prices—ideal for formal presentations.\n\n### ✅ Ecosystem and Community Contributions:\n- **Most Comprehensive Chinese Documentation**: Over 50,000 words of technical documentation, 100+ code examples, and 10+ architecture diagrams covering everything from installation to advanced development—far surpassing the depth of the original project.\n- **Enterprise-Grade Workflow Standards**: Incorporates PR templates, branch protection, testing frameworks, and emergency recovery procedures, making it suitable for team collaboration and commercial deployment.\n\n---\n\n## 3. Promising Startup Opportunities\n\nHere are **high-potential entrepreneurial directions** derived from this framework:\n\n### 🚀 Startup Idea 1: [AI Research Assistant SaaS Platform]  \n> **Target Market**: Individual investors, financial content creators, and small private fund firms  \n> **Product Form**: Subscription-based web platform integrating core capabilities of TradingAgents-CN  \n> **Key Features**:\n> - Daily automated delivery of “AI Briefings on A-Share Hot Stocks”\n> - Custom watchlists with scheduled deep analysis (e.g., weekly runs every Sunday morning)\n> - Results delivered via WeChat/DingTalk robot notifications\n> - “Analyst View Comparison” module showing outputs from different LLMs side by side\n\n### 💼 Startup Idea 2: [Custom AI Research Engine for Financial Institutions]  \n> **Target Market**: Securities research departments, asset management firms  \n> **Value-Added Services**:\n> - Integration with internal databases (Wind, iFind)\n> - Training of domain-specific models (e.g., EV supply chain knowledge graphs)\n> - Audit-compliant operation logs and role-based access control\n> - Output of research reports in proprietary institutional templates (.docx/.pdf)\n\n### 📱 Startup Idea 3: [AI-Powered Financial Content Generation Platform]  \n> **Target Market**: Financial influencers and media creators  \n> **Business Model**:\n> - Input a stock ticker → automatically generate video scripts (e.g., “Is XX Company Worth Buying?”)\n> - Combine with Kimi/Tongyi Tingwu for voice narration and animated charts\n> - Export formatted articles ready for WeChat Official Accounts\n> - Scalable into a productivity tool for MCN agencies\n\n### 🔍 Startup Idea 4: [Smart Stock Screening & Backtesting Platform]  \n> **Target Market**: Bridge between AI analysis and quantitative trading  \n> **Core Features**:\n> - Convert \"Buy/Sell\" signals from TradingAgents into historical backtesting strategies\n> - Calculate performance metrics: win rate, annualized return, max drawdown\n> - Integrate with JoinQuant or MyQuant for automated live trading\n> - Launch an “AI Strategy Leaderboard” where users vote on top-performing model combinations\n\n### 🌐 Startup Idea 5: [Open-Source Ecosystem Service Provider]  \n> **Target Market**: Developer community around TradingAgents-CN  \n> **Service Offerings**:\n> - Hosted cloud version (no setup required, pay-per-use)\n> - Plugin marketplace (e.g., East Money forum sentiment analysis plugin)\n> - Sell pre-trained fine-tuned models optimized for sectors like consumer goods or healthcare\n> - Organize “AI Stock-Picking Competitions” to drive algorithm innovation\n\n---\n> **Summary & Recommendation**: This project already boasts a robust technical foundation and strong Chinese-market adaptation. It is best positioned to enter **B2B institutional services** or **vertical SaaS products**. An ideal go-to-market strategy would involve offering a free community edition to build user traction, followed by monetization through a premium professional version.\n```",
    "text": "TradingAgents 中文增强版\n🚀\n最新版本 cn-0.1.15\n: 开发者体验与LLM生态系统大升级！新增千帆大模型支持、完整开发工具链、学术研究资料、企业级工作流规范！\n🎯\n核心功能\n: 原生OpenAI支持 | Google AI全面集成 | 自定义端点配置 | 智能模型选择 | 多LLM提供商支持 | 模型选择持久化 | Docker容器化部署 | 专业报告导出 | 完整A股支持 | 中文本地化\n基于多智能体大语言模型的\n中文金融交易决策框架\n。专为中文用户优化，提供完整的A股/港股/美股分析能力。\n🙏 致敬源项目\n感谢\nTauric Research\n团队创造的革命性多智能体交易框架\nTradingAgents\n！\n🎯 我们的使命\n: 为中国用户提供完整的中文化体验，支持A股/港股市场，集成国产大模型，推动AI金融技术在中文社区的普及应用。\n🆕 v0.1.15 重大更新\n🤖 LLM生态系统大升级\n千帆大模型支持\n: 新增百度千帆(ERNIE)大模型完整集成\nLLM适配器重构\n: 统一的OpenAI兼容适配器架构\n多厂商支持\n: 支持更多国产大模型提供商\n集成指南\n: 完整的LLM集成开发文档和测试工具\n📚 学术研究支持\nTradingAgents论文\n: 完整的中文翻译版本和深度解读\n技术博客\n: 详细的技术分析和实现原理解读\n学术资料\n: PDF论文和相关研究资料\n引用支持\n: 标准的学术引用格式和参考文献\n🛠️ 开发者体验升级\n开发工作流\n: 标准化的开发流程和分支管理规范\n安装验证\n: 完整的安装测试和验证脚本\n文档重构\n: 结构化的文档系统和快速开始指南\nPR模板\n: 标准化的Pull Request模板和代码审查流程\n🔧 企业级工具链\n分支保护\n: GitHub分支保护策略和安全规则\n紧急程序\n: 完整的紧急处理和故障恢复程序\n测试框架\n: 增强的测试覆盖和验证工具\n部署指南\n: 企业级部署和配置管理\n📋 v0.1.14 功能回顾\n👥 用户权限管理系统\n完整用户管理\n: 新增用户注册、登录、权限控制功能\n角色权限\n: 支持多级用户角色和权限管理\n会话管理\n: 安全的用户会话和状态管理\n用户活动日志\n: 完整的用户操作记录和审计功能\n🔐 Web用户认证系统\n登录组件\n: 现代化的用户登录界面\n认证管理器\n: 统一的用户认证和授权管理\n安全增强\n: 密码加密、会话安全等安全机制\n用户仪表板\n: 个性化的用户活动仪表板\n🗄️ 数据管理优化\nMongoDB集成增强\n: 改进的MongoDB连接和数据管理\n数据目录重组\n: 优化的数据存储结构和管理\n数据迁移脚本\n: 完整的数据迁移和备份工具\n缓存优化\n: 提升数据加载和分析结果缓存性能\n🧪 测试覆盖增强\n功能测试脚本\n: 新增6个专项功能测试脚本\n工具处理器测试\n: Google工具处理器修复验证\n引导自动隐藏测试\n: UI交互功能测试\n在线工具配置测试\n: 工具配置和选择逻辑测试\n真实场景测试\n: 实际使用场景的端到端测试\n美股独立性测试\n: 美股分析功能独立性验证\n🆕 v0.1.13 重大更新\n🤖 原生OpenAI端点支持\n自定义OpenAI端点\n: 支持配置任意OpenAI兼容的API端点\n灵活模型选择\n: 可以使用任何OpenAI格式的模型，不限于官方模型\n智能适配器\n: 新增原生OpenAI适配器，提供更好的兼容性和性能\n配置管理\n: 统一的端点和模型配置管理系统\n🧠 Google AI生态系统全面集成\n三大Google AI包支持\n: langchain-google-genai、google-generativeai、google-genai\n9个验证模型\n: gemini-2.5-pro, gemini-2.5-flash, gemini-2.0-flash等最新模型\nGoogle工具处理器\n: 专门的Google AI工具调用处理器\n智能降级机制\n: 高级功能失败时自动降级到基础功能\n🔧 LLM适配器架构优化\nGoogleOpenAIAdapter\n: 新增Google AI的OpenAI兼容适配器\n统一接口\n: 所有LLM提供商使用统一的调用接口\n错误处理增强\n: 改进的异常处理和自动重试机制\n性能监控\n: 添加LLM调用性能监控和统计\n🎨 Web界面智能优化\n智能模型选择\n: 根据可用性自动选择最佳模型\nKeyError修复\n: 彻底解决模型选择中的KeyError问题\nUI响应优化\n: 改进模型切换的响应速度和用户体验\n错误提示\n: 更友好的错误提示和解决建议\n🆕 v0.1.12 重大更新\n🧠 智能新闻分析模块\n智能新闻过滤器\n: 基于AI的新闻相关性评分和质量评估\n多层次过滤机制\n: 基础过滤、增强过滤、集成过滤三级处理\n新闻质量评估\n: 自动识别和过滤低质量、重复、无关新闻\n统一新闻工具\n: 整合多个新闻源，提供统一的新闻获取接口\n🔧 技术修复和优化\nDashScope适配器修复\n: 解决工具调用兼容性问题\nDeepSeek死循环修复\n: 修复新闻分析师的无限循环问题\nLLM工具调用增强\n: 提升工具调用的可靠性和稳定性\n新闻检索器优化\n: 增强新闻数据获取和处理能力\n📚 完善测试和文档\n全面测试覆盖\n: 新增15+个测试文件，覆盖所有新功能\n详细技术文档\n: 新增8个技术分析报告和修复文档\n用户指南完善\n: 新增新闻过滤使用指南和最佳实践\n演示脚本\n: 提供完整的新闻过滤功能演示\n🗂️ 项目结构优化\n文档分类整理\n: 按功能将文档分类到docs子目录\n示例代码归位\n: 演示脚本统一到examples目录\n根目录整洁\n: 保持根目录简洁，提升项目专业度\n🎯 核心特性\n🤖 多智能体协作架构\n专业分工\n: 基本面、技术面、新闻面、社交媒体四大分析师\n结构化辩论\n: 看涨/看跌研究员进行深度分析\n智能决策\n: 交易员基于所有输入做出最终投资建议\n风险管理\n: 多层次风险评估和管理机制\n🖥️ Web界面展示\n📸 界面截图\n🎨\n现代化Web界面\n: 基于Streamlit构建的响应式Web应用，提供直观的股票分析体验\n🏠 主界面 - 分析配置\n智能配置面板，支持多市场股票分析，5级研究深度选择\n📊 实时分析进度\n实时进度跟踪，可视化分析过程，智能时间预估\n📈 分析结果展示\n专业投资报告，多维度分析结果，一键导出功能\n🎯 核心功能特色\n📋\n智能分析配置\n🌍 多市场支持\n: 美股、A股、港股一站式分析\n🎯 5级研究深度\n: 从2分钟快速分析到25分钟全面研究\n🤖 智能体选择\n: 市场技术、基本面、新闻、社交媒体分析师\n📅 灵活时间设置\n: 支持历史任意时间点分析\n🚀\n实时进度跟踪\n📊 可视化进度\n: 实时显示分析进展和剩余时间\n🔄 智能步骤识别\n: 自动识别当前分析阶段\n⏱️ 准确时间预估\n: 基于历史数据的智能时间计算\n💾 状态持久化\n: 页面刷新不丢失分析进度\n📈\n专业结果展示\n🎯 投资决策\n: 明确的买入/持有/卖出建议\n📊 多维分析\n: 技术面、基本面、新闻面综合评估\n🔢 量化指标\n: 置信度、风险评分、目标价位\n📄 专业报告\n: 支持Markdown/Word/PDF格式导出\n🤖\n多LLM模型管理\n🌐 4大提供商\n: DashScope、DeepSeek、Google AI、OpenRouter\n🎯 60+模型选择\n: 从经济型到旗舰级模型全覆盖\n💾 配置持久化\n: URL参数存储，刷新保持设置\n⚡ 快速切换\n: 5个热门模型一键选择按钮\n🎮 Web界面操作指南\n🚀\n快速开始流程\n启动应用\n:\npython start_web.py\n或\ndocker-compose up -d\n访问界面\n: 浏览器打开\nhttp://localhost:8501\n配置模型\n: 侧边栏选择LLM提供商和模型\n输入股票\n: 输入股票代码（如 AAPL、000001、0700.HK）\n选择深度\n: 根据需求选择1-5级研究深度\n开始分析\n: 点击\"🚀 开始分析\"按钮\n查看结果\n: 实时跟踪进度，查看分析报告\n导出报告\n: 一键导出专业格式报告\n📊\n支持的股票代码格式\n🇺🇸 美股\n:\nAAPL\n,\nTSLA\n,\nMSFT\n,\nNVDA\n,\nGOOGL\n🇨🇳 A股\n:\n000001\n,\n600519\n,\n300750\n,\n002415\n🇭🇰 港股\n:\n0700.HK\n,\n9988.HK\n,\n3690.HK\n,\n1810.HK\n🎯\n研究深度说明\n1级 (2-4分钟)\n: 快速概览，基础技术指标\n2级 (4-6分钟)\n: 标准分析，技术+基本面\n3级 (6-10分钟)\n: 深度分析，加入新闻情绪 ⭐\n推荐\n4级 (10-15分钟)\n: 全面分析，多轮智能体辩论\n5级 (15-25分钟)\n: 最深度分析，完整研究报告\n💡\n使用技巧\n🔄 实时刷新\n: 分析过程中可随时刷新页面，进度不丢失\n📱 移动适配\n: 支持手机和平板设备访问\n🎨 深色模式\n: 自动适配系统主题设置\n⌨️ 快捷键\n: 支持Enter键快速提交分析\n📋 历史记录\n: 自动保存最近的分析配置\n📖\n详细指南\n: 完整的Web界面使用说明请参考\n🖥️ Web界面详细使用指南\n🎯 功能特性\n🚀  智能新闻分析✨\nv0.1.12重大升级\n功能特性\n状态\n详细说明\n🧠 智能新闻分析\n🆕 v0.1.12\nAI新闻过滤，质量评估，相关性分析\n🔧 新闻过滤器\n🆕 v0.1.12\n多层次过滤，基础/增强/集成三级处理\n📰 统一新闻工具\n🆕 v0.1.12\n整合多源新闻，统一接口，智能检索\n🤖 多LLM提供商\n🆕 v0.1.11\n4大提供商，60+模型，智能分类管理\n💾 模型选择持久化\n🆕 v0.1.11\nURL参数存储，刷新保持，配置分享\n🎯 快速选择按钮\n🆕 v0.1.11\n一键切换热门模型，提升操作效率\n📊 实时进度显示\n✅ v0.1.10\n异步进度跟踪，智能步骤识别，准确时间计算\n💾 智能会话管理\n✅ v0.1.10\n状态持久化，自动降级，跨页面恢复\n🎯 一键查看报告\n✅ v0.1.10\n分析完成后一键查看，智能结果恢复\n🖥️ Streamlit界面\n✅ 完整支持\n现代化响应式界面，实时交互和数据可视化\n⚙️ 配置管理\n✅ 完整支持\nWeb端API密钥管理，模型选择，参数配置\n🎨 CLI用户体验 ✨\nv0.1.9优化\n功能特性\n状态\n详细说明\n🖥️ 界面与日志分离\n✅ 完整支持\n用户界面清爽美观，技术日志独立管理\n🔄 智能进度显示\n✅ 完整支持\n多阶段进度跟踪，防止重复提示\n⏱️ 时间预估功能\n✅ 完整支持\n智能分析阶段显示预计耗时\n🌈 Rich彩色输出\n✅ 完整支持\n彩色进度指示，状态图标，视觉效果提升\n🧠 LLM模型支持 ✨\nv0.1.13全面升级\n模型提供商\n支持模型\n特色功能\n新增功能\n🇨🇳 阿里百炼\nqwen-turbo/plus/max\n中文优化，成本效益高\n✅ 集成\n🇨🇳 DeepSeek\ndeepseek-chat\n工具调用，性价比极高\n✅ 集成\n🌍 Google AI\n9个验证模型\n最新Gemini 2.5系列\n🆕 升级\n├─\n最新旗舰\ngemini-2.5-pro/flash\n最新旗舰，超快响应\n🆕 新增\n├─\n稳定推荐\ngemini-2.0-flash\n推荐使用，平衡性能\n🆕 新增\n├─\n经典强大\ngemini-1.5-pro/flash\n经典稳定，高质量分析\n✅ 集成\n└─\n轻量快速\ngemini-2.5-flash-lite\n轻量级任务，快速响应\n🆕 新增\n🌐 原生OpenAI\n自定义端点支持\n任意OpenAI兼容端点\n🆕 新增\n🌐 OpenRouter\n60+模型聚合平台\n一个API访问所有主流模型\n✅ 集成\n├─\nOpenAI\no4-mini-high, o3-pro, GPT-4o\n最新o系列，推理专业版\n✅ 集成\n├─\nAnthropic\nClaude 4 Opus/Sonnet/Haiku\n顶级性能，平衡版本\n✅ 集成\n├─\nMeta\nLlama 4 Maverick/Scout\n最新Llama 4系列\n✅ 集成\n└─\n自定义\n任意OpenRouter模型ID\n无限扩展，个性化选择\n✅ 集成\n🎯 快速选择\n: 5个热门模型快速按钮 |\n💾 持久化\n: URL参数存储，刷新保持 |\n🔄 智能切换\n: 一键切换不同提供商\n📊 数据源与市场\n市场类型\n数据源\n覆盖范围\n🇨🇳 A股\nTushare, AkShare, 通达信\n沪深两市，实时行情，财报数据\n🇭🇰 港股\nAkShare, Yahoo Finance\n港交所，实时行情，基本面\n🇺🇸 美股\nFinnHub, Yahoo Finance\nNYSE, NASDAQ，实时数据\n📰 新闻\nGoogle News\n实时新闻，多语言支持\n🤖 智能体团队\n分析师团队\n: 📈市场分析 | 💰基本面分析 | 📰新闻分析 | 💬情绪分析\n研究团队\n: 🐂看涨研究员 | 🐻看跌研究员 | 🎯交易决策员\n管理层\n: 🛡️风险管理员 | 👔研究主管\n🚀 快速开始\n🐳 Docker部署 (推荐)\n#\n1. 克隆项目\ngit clone https://github.com/hsliuping/TradingAgents-CN.git\ncd\nTradingAgents-CN\n#\n2. 配置环境变量\ncp .env.example .env\n#\n编辑 .env 文件，填入API密钥\n#\n3. 启动服务\n#\n首次启动或代码变更时（需要构建镜像）\ndocker-compose up -d --build\n#\n日常启动（镜像已存在，无代码变更）\ndocker-compose up -d\n#\n智能启动（自动判断是否需要构建）\n#\nWindows环境\npowershell -ExecutionPolicy Bypass -File scripts\n\\s\nmart_start.ps1\n#\nLinux/Mac环境\nchmod +x scripts/smart_start.sh\n&&\n./scripts/smart_start.sh\n#\n4. 访问应用\n#\nWeb界面: http://localhost:8501\n💻 本地部署\n#\n1. 升级pip (重要！避免安装错误)\npython -m pip install --upgrade pip\n#\n2. 安装依赖\npip install -e\n.\n#\n3. 启动应用\npython start_web.py\n#\n4. 访问 http://localhost:8501\n📊 开始分析\n选择模型\n: DeepSeek V3 / 通义千问 / Gemini\n输入股票\n:\n000001\n(A股) /\nAAPL\n(美股) /\n0700.HK\n(港股)\n开始分析\n: 点击\"🚀 开始分析\"按钮\n实时跟踪\n: 观察实时进度和分析步骤\n查看报告\n: 点击\"📊 查看分析报告\"按钮\n导出报告\n: 支持Word/PDF/Markdown格式\n🔐 用户权限管理\n🔑 默认账号信息\n系统提供以下默认账号，首次启动时自动创建：\n用户名\n密码\n角色\n权限说明\nadmin\nadmin123\n管理员\n完整系统权限，用户管理，系统配置\nuser\nuser123\n普通用户\n股票分析，报告查看，基础功能\n⚠️\n安全提醒\n: 首次登录后请立即修改默认密码！\n🛡️ 权限控制体系\n🔐 登录认证\n: 基于用户名密码的安全认证\n👥 角色管理\n: 管理员、普通用户等多级权限\n⏰ 会话管理\n: 自动超时保护，安全登出\n📊 操作日志\n: 完整的用户活动记录\n🛠️ 用户管理工具\n系统提供完整的命令行用户管理工具：\nWindows 用户\n#\n使用 PowerShell 脚本\n.\\scripts\\user_manager.ps1 list\n#\n列出所有用户\n.\\scripts\\user_manager.ps1 change\n-\npassword admin\n#\n修改密码\n.\\scripts\\user_manager.ps1 create newuser trader\n#\n创建新用户\n.\\scripts\\user_manager.ps1 delete olduser\n#\n删除用户\n#\n或使用批处理文件\n.\\scripts\\\nuser_manager.bat\nlist\nPython 脚本（跨平台）\n#\n直接使用 Python 脚本\npython scripts/user_password_manager.py list\npython scripts/user_password_manager.py change-password admin\npython scripts/user_password_manager.py create newuser --role trader\npython scripts/user_password_manager.py delete olduser\npython scripts/user_password_manager.py reset\n#\n重置为默认配置\n📋 支持的用户操作\n📝 列出用户\n: 查看所有用户及其角色权限\n🔑 修改密码\n: 安全的密码更新机制\n👤 创建用户\n: 支持自定义角色和权限\n🗑️ 删除用户\n: 安全的用户删除功能\n🔄 重置配置\n: 恢复默认用户设置\n📁 配置文件位置\n用户配置存储在：\nweb/config/users.json\n📚\n详细文档\n: 完整的用户管理指南请参考\nscripts/USER_MANAGEMENT.md\n🚧 当前版本限制\n❌ 暂不支持在线用户注册\n❌ 暂不支持Web界面的角色管理\n✅ 支持完整的命令行用户管理\n✅ 支持完整的权限控制框架\n🎯 核心优势\n🧠 智能新闻分析\n: v0.1.12新增AI驱动的新闻过滤和质量评估系统\n🔧 多层次过滤\n: 基础、增强、集成三级新闻过滤机制\n📰 统一新闻工具\n: 整合多源新闻，提供统一的智能检索接口\n🆕 多LLM集成\n: v0.1.11新增4大提供商，60+模型，一站式AI体验\n💾 配置持久化\n: 模型选择真正持久化，URL参数存储，刷新保持\n🎯 快速切换\n: 5个热门模型快速按钮，一键切换不同AI\n🆕 实时进度\n: v0.1.10异步进度跟踪，告别黑盒等待\n💾 智能会话\n: 状态持久化，页面刷新不丢失分析结果\n🔐 用户权限\n: v0.1.14新增完整的用户认证和权限管理体系\n🇨🇳 中国优化\n: A股/港股数据 + 国产LLM + 中文界面\n🐳 容器化\n: Docker一键部署，环境隔离，快速扩展\n📄 专业报告\n: 多格式导出，自动生成投资建议\n🛡️ 稳定可靠\n: 多层数据源，智能降级，错误恢复\n🔧 技术架构\n核心技术\n: Python 3.10+ | LangChain | Streamlit | MongoDB | Redis\nAI模型\n: DeepSeek V3 | 阿里百炼 | Google AI | OpenRouter(60+模型) | OpenAI\n数据源\n: Tushare | AkShare | FinnHub | Yahoo Finance\n部署\n: Docker | Docker Compose | 本地部署\n📚 文档和支持\n📖 完整文档\n:\ndocs/\n- 安装指南、使用教程、API文档\n🚨 故障排除\n:\ntroubleshooting/\n- 常见问题解决方案\n🔄 更新日志\n:\nCHANGELOG.md\n- 详细版本历史\n🚀 快速开始\n:\nQUICKSTART.md\n- 5分钟快速部署指南\n🆚 中文增强特色\n相比原版新增\n: 智能新闻分析 | 多层次新闻过滤 | 新闻质量评估 | 统一新闻工具 | 多LLM提供商集成 | 模型选择持久化 | 快速切换按钮 | | 实时进度显示 | 智能会话管理 | 中文界面 | A股数据 | 国产LLM | Docker部署 | 专业报告导出 | 统一日志管理 | Web配置界面 | 成本优化\nDocker部署包含的服务\n:\n🌐\nWeb应用\n: TradingAgents-CN主程序\n🗄️\nMongoDB\n: 数据持久化存储\n⚡\nRedis\n: 高速缓存\n📊\nMongoDB Express\n: 数据库管理界面\n🎛️\nRedis Commander\n: 缓存管理界面\n💻 方式二：本地部署\n适用场景\n: 开发环境、自定义配置、离线使用\n环境要求\nPython 3.10+ (推荐 3.11)\n4GB+ RAM (推荐 8GB+)\n稳定的网络连接\n安装步骤\n#\n1. 克隆项目\ngit clone https://github.com/hsliuping/TradingAgents-CN.git\ncd\nTradingAgents-CN\n#\n2. 创建虚拟环境\npython -m venv env\n#\nWindows\nenv\n\\S\ncripts\n\\a\nctivate\n#\nLinux/macOS\nsource\nenv/bin/activate\n#\n3. 升级pip\npython -m pip install --upgrade pip\n#\n4. 安装所有依赖\npip install -r requirements.txt\n#\n或者使用pip install -e .\npip install -e\n.\n#\n注意：requirements.txt已包含所有必需依赖：\n#\n- 数据库支持 (MongoDB + Redis)\n#\n- 多市场数据源 (Tushare, AKShare, FinnHub等)\n#\n- Web界面和报告导出功能\n配置API密钥\n🇨🇳 推荐：使用阿里百炼（国产大模型）\n#\n复制配置模板\ncp .env.example .env\n#\n编辑 .env 文件，配置以下必需的API密钥：\nDASHSCOPE_API_KEY=your_dashscope_api_key_here\nFINNHUB_API_KEY=your_finnhub_api_key_here\n#\n推荐：Tushare API（专业A股数据）\nTUSHARE_TOKEN=your_tushare_token_here\nTUSHARE_ENABLED=true\n#\n可选：其他AI模型API\nGOOGLE_API_KEY=your_google_api_key_here\nDEEPSEEK_API_KEY=your_deepseek_api_key_here\n#\n数据库配置（可选，提升性能）\n#\n本地部署使用标准端口\nMONGODB_ENABLED=false\n#\n设为true启用MongoDB\nREDIS_ENABLED=false\n#\n设为true启用Redis\nMONGODB_HOST=localhost\nMONGODB_PORT=27017\n#\n标准MongoDB端口\nREDIS_HOST=localhost\nREDIS_PORT=6379\n#\n标准Redis端口\n#\nDocker部署时需要修改主机名\n#\nMONGODB_HOST=mongodb\n#\nREDIS_HOST=redis\n📋 部署模式配置说明\n本地部署模式\n：\n#\n数据库配置（本地部署）\nMONGODB_ENABLED=true\nREDIS_ENABLED=true\nMONGODB_HOST=localhost\n#\n本地主机\nMONGODB_PORT=27017\n#\n标准端口\nREDIS_HOST=localhost\n#\n本地主机\nREDIS_PORT=6379\n#\n标准端口\nDocker部署模式\n：\n#\n数据库配置（Docker部署）\nMONGODB_ENABLED=true\nREDIS_ENABLED=true\nMONGODB_HOST=mongodb\n#\nDocker容器服务名\nMONGODB_PORT=27017\n#\n标准端口\nREDIS_HOST=redis\n#\nDocker容器服务名\nREDIS_PORT=6379\n#\n标准端口\n💡\n配置提示\n：\n本地部署：需要手动启动MongoDB和Redis服务\nDocker部署：数据库服务通过docker-compose自动启动\n端口冲突：如果本地已有数据库服务，可修改docker-compose.yml中的端口映射\n🌍 可选：使用国外模型\n#\nOpenAI (需要科学上网)\nOPENAI_API_KEY=your_openai_api_key\n#\nAnthropic (需要科学上网)\nANTHROPIC_API_KEY=your_anthropic_api_key\n🗄️ 数据库配置（MongoDB + Redis）\n高性能数据存储支持\n本项目支持\nMongoDB\n和\nRedis\n数据库，提供：\n📊 股票数据缓存\n: 减少API调用，提升响应速度\n🔄 智能降级机制\n: MongoDB → API → 本地缓存的多层数据源\n⚡ 高性能缓存\n: Redis缓存热点数据，毫秒级响应\n🛡️ 数据持久化\n: MongoDB存储历史数据，支持离线分析\n数据库部署方式\n🐳 Docker部署（推荐）\n如果您使用Docker部署，数据库已自动包含在内：\n#\nDocker部署会自动启动所有服务，包括：\ndocker-compose up -d --build\n#\n- Web应用 (端口8501)\n#\n- MongoDB (端口27017)\n#\n- Redis (端口6379)\n#\n- 数据库管理界面 (端口8081, 8082)\n💻 本地部署 - 数据库配置\n如果您使用本地部署，可以选择以下方式：\n方式一：仅启动数据库服务\n#\n仅启动 MongoDB + Redis 服务（不启动Web应用）\ndocker-compose up -d mongodb redis mongo-express redis-commander\n#\n查看服务状态\ndocker-compose ps\n#\n停止服务\ndocker-compose down\n方式二：完全本地安装\n#\n数据库依赖已包含在requirements.txt中，无需额外安装\n#\n启动 MongoDB (默认端口 27017)\nmongod --dbpath ./data/mongodb\n#\n启动 Redis (默认端口 6379)\nredis-server\n⚠️\n重要说明\n:\n🐳 Docker部署\n: 数据库自动包含，无需额外配置\n💻 本地部署\n: 可选择仅启动数据库服务或完全本地安装\n📋 推荐\n: 使用Docker部署以获得最佳体验和一致性\n数据库配置选项\n环境变量配置\n（推荐）：\n#\nMongoDB 配置\nMONGODB_HOST=localhost\nMONGODB_PORT=27017\nMONGODB_DATABASE=trading_agents\nMONGODB_USERNAME=admin\nMONGODB_PASSWORD=your_password\n#\nRedis 配置\nREDIS_HOST=localhost\nREDIS_PORT=6379\nREDIS_PASSWORD=your_redis_password\nREDIS_DB=0\n配置文件方式\n：\n# config/database_config.py\nDATABASE_CONFIG\n=\n{\n'mongodb'\n: {\n'host'\n:\n'localhost'\n,\n'port'\n:\n27017\n,\n'database'\n:\n'trading_agents'\n,\n'username'\n:\n'admin'\n,\n'password'\n:\n'your_password'\n},\n'redis'\n: {\n'host'\n:\n'localhost'\n,\n'port'\n:\n6379\n,\n'password'\n:\n'your_redis_password'\n,\n'db'\n:\n0\n}\n}\n数据库功能特性\nMongoDB 功能\n：\n✅ 股票基础信息存储\n✅ 历史价格数据缓存\n✅ 分析结果持久化\n✅ 用户配置管理\n✅ 自动数据同步\nRedis 功能\n：\n⚡ 实时价格数据缓存\n⚡ API响应结果缓存\n⚡ 会话状态管理\n⚡ 热点数据预加载\n⚡ 分布式锁支持\n智能降级机制\n系统采用多层数据源降级策略，确保高可用性：\n📊 数据获取流程：\n1. 🔍 检查 Redis 缓存 (毫秒级)\n2. 📚 查询 MongoDB 存储 (秒级)\n3. 🌐 调用通达信API (秒级)\n4. 💾 本地文件缓存 (备用)\n5. ❌ 返回错误信息\n配置降级策略\n：\n# 在 .env 文件中配置\nENABLE_MONGODB\n=\ntrue\nENABLE_REDIS\n=\ntrue\nENABLE_FALLBACK\n=\ntrue\n# 缓存过期时间（秒）\nREDIS_CACHE_TTL\n=\n300\nMONGODB_CACHE_TTL\n=\n3600\n性能优化建议\n生产环境配置\n：\n#\nMongoDB 优化\nMONGODB_MAX_POOL_SIZE=50\nMONGODB_MIN_POOL_SIZE=5\nMONGODB_MAX_IDLE_TIME=30000\n#\nRedis 优化\nREDIS_MAX_CONNECTIONS=20\nREDIS_CONNECTION_POOL_SIZE=10\nREDIS_SOCKET_TIMEOUT=5\n数据库管理工具\n#\n初始化数据库\npython scripts/setup/init_database.py\n#\n系统状态检查\npython scripts/validation/check_system_status.py\n#\n清理缓存工具\npython scripts/maintenance/cleanup_cache.py --days 7\n故障排除\n常见问题解决\n：\n🪟 Windows 10 ChromaDB兼容性问题\n问题现象\n：在Windows 10上出现\nConfiguration error: An instance of Chroma already exists for ephemeral with different settings\n错误，而Windows 11正常。\n快速解决方案\n：\n#\n方案1：禁用内存功能（推荐）\n#\n在 .env 文件中添加：\nMEMORY_ENABLED=false\n#\n方案2：使用专用修复脚本\npowershell -ExecutionPolicy Bypass -File scripts\n\\f\nix_chromadb_win10.ps1\n#\n方案3：管理员权限运行\n#\n右键PowerShell -> \"以管理员身份运行\"\n详细解决方案\n：参考\nWindows 10兼容性指南\nMongoDB连接失败\nDocker部署\n：\n#\n检查服务状态\ndocker-compose logs mongodb\n#\n重启服务\ndocker-compose restart mongodb\n本地部署\n：\n#\n检查MongoDB进程\nps aux\n|\ngrep mongod\n#\n重启MongoDB\nsudo systemctl restart mongod\n#\nLinux\nbrew services restart mongodb\n#\nmacOS\nRedis连接超时\n#\n检查Redis状态\nredis-cli ping\n#\n清理Redis缓存\nredis-cli flushdb\n缓存问题\n#\n检查系统状态和缓存\npython scripts/validation/check_system_status.py\n#\n清理过期缓存\npython scripts/maintenance/cleanup_cache.py --days 7\n💡\n提示\n: 即使不配置数据库，系统仍可正常运行，会自动降级到API直接调用模式。数据库配置是可选的性能优化功能。\n📚\n详细文档\n: 更多数据库配置信息请参考\n数据库架构文档\n📤 报告导出功能\n新增功能：专业分析报告导出\n本项目现已支持将股票分析结果导出为多种专业格式：\n支持的导出格式\n：\n📄 Markdown (.md)\n- 轻量级标记语言，适合技术用户和版本控制\n📝 Word (.docx)\n- Microsoft Word文档，适合商务报告和进一步编辑\n📊 PDF (.pdf)\n- 便携式文档格式，适合正式分享和打印\n报告内容结构\n：\n🎯\n投资决策摘要\n- 买入/持有/卖出建议，置信度，风险评分\n📊\n详细分析报告\n- 技术分析，基本面分析，市场情绪，新闻事件\n⚠️\n风险提示\n- 完整的投资风险声明和免责条款\n📋\n配置信息\n- 分析参数，模型信息，生成时间\n使用方法\n：\n完成股票分析后，在结果页面底部找到\"📤 导出报告\"部分\n选择需要的格式：Markdown、Word或PDF\n点击导出按钮，系统自动生成并提供下载\n安装导出依赖\n：\n#\n安装Python依赖\npip install markdown pypandoc\n#\n安装系统工具（用于PDF导出）\n#\nWindows: choco install pandoc wkhtmltopdf\n#\nmacOS: brew install pandoc wkhtmltopdf\n#\nLinux: sudo apt-get install pandoc wkhtmltopdf\n📚\n详细文档\n: 完整的导出功能使用指南请参考\n导出功能指南\n🚀 启动应用\n🐳 Docker启动（推荐）\n如果您使用Docker部署，应用已经自动启动：\n#\n应用已在Docker中运行，直接访问：\n#\nWeb界面: http://localhost:8501\n#\n数据库管理: http://localhost:8081\n#\n缓存管理: http://localhost:8082\n#\n查看运行状态\ndocker-compose ps\n#\n查看日志\ndocker-compose logs -f web\n💻 本地启动\n如果您使用本地部署：\n#\n1. 激活虚拟环境\n#\nWindows\n.\n\\e\nnv\n\\S\ncripts\n\\a\nctivate\n#\nLinux/macOS\nsource\nenv/bin/activate\n#\n2. 安装项目到虚拟环境（重要！）\npip install -e\n.\n#\n3. 启动Web管理界面\n#\n方法1：使用项目启动脚本（推荐）\npython start_web.py\n#\n方法2：使用原始启动脚本\npython web/run_web.py\n#\n方法3：直接使用streamlit（需要先安装项目）\nstreamlit run web/app.py\n然后在浏览器中访问\nhttp://localhost:8501\nWeb界面特色功能\n:\n🇺🇸\n美股分析\n: 支持 AAPL, TSLA, NVDA 等美股代码\n🇨🇳\nA股分析\n: 支持 000001, 600519, 300750 等A股代码\n📊\n实时数据\n: 通达信API提供A股实时行情数据\n🤖\n智能体选择\n: 可选择不同的分析师组合\n📤\n报告导出\n: 一键导出Markdown/Word/PDF格式专业分析报告\n🎯\n5级研究深度\n: 从快速分析(2-4分钟)到全面分析(15-25分钟)\n📊\n智能分析师选择\n: 市场技术、基本面、新闻、社交媒体分析师\n🔄\n实时进度显示\n: 可视化分析过程，避免等待焦虑\n📈\n结构化结果\n: 投资建议、目标价位、置信度、风险评估\n🇨🇳\n完全中文化\n: 界面和分析结果全中文显示\n研究深度级别说明\n:\n1级 - 快速分析\n(2-4分钟): 日常监控，基础决策\n2级 - 基础分析\n(4-6分钟): 常规投资，平衡速度\n3级 - 标准分析\n(6-10分钟): 重要决策，推荐默认\n4级 - 深度分析\n(10-15分钟): 重大投资，详细研究\n5级 - 全面分析\n(15-25分钟): 最重要决策，最全面分析\n💻 代码调用（适合开发者）\nfrom\ntradingagents\n.\ngraph\n.\ntrading_graph\nimport\nTradingAgentsGraph\nfrom\ntradingagents\n.\ndefault_config\nimport\nDEFAULT_CONFIG\n# 配置阿里百炼\nconfig\n=\nDEFAULT_CONFIG\n.\ncopy\n()\nconfig\n[\n\"llm_provider\"\n]\n=\n\"dashscope\"\nconfig\n[\n\"deep_think_llm\"\n]\n=\n\"qwen-plus\"\n# 深度分析\nconfig\n[\n\"quick_think_llm\"\n]\n=\n\"qwen-turbo\"\n# 快速任务\n# 创建交易智能体\nta\n=\nTradingAgentsGraph\n(\ndebug\n=\nTrue\n,\nconfig\n=\nconfig\n)\n# 分析股票 (以苹果公司为例)\nstate\n,\ndecision\n=\nta\n.\npropagate\n(\n\"AAPL\"\n,\n\"2024-01-15\"\n)\n# 输出分析结果\nprint\n(\nf\"推荐动作:\n{\ndecision\n[\n'action'\n]\n}\n\"\n)\nprint\n(\nf\"置信度:\n{\ndecision\n[\n'confidence'\n]:.1%\n}\n\"\n)\nprint\n(\nf\"风险评分:\n{\ndecision\n[\n'risk_score'\n]:.1%\n}\n\"\n)\nprint\n(\nf\"推理过程:\n{\ndecision\n[\n'reasoning'\n]\n}\n\"\n)\n快速启动脚本\n#\n阿里百炼演示（推荐中文用户）\npython examples/dashscope/demo_dashscope_chinese.py\n#\n阿里百炼完整演示\npython examples/dashscope/demo_dashscope.py\n#\n阿里百炼简化测试\npython examples/dashscope/demo_dashscope_simple.py\n#\nOpenAI演示（需要国外API）\npython examples/openai/demo_openai.py\n#\n集成测试\npython tests/integration/test_dashscope_integration.py\n📁 数据目录配置\n新功能\n: 灵活配置数据存储路径，支持多种配置方式：\n#\n查看当前数据目录配置\npython -m cli.main data-config --show\n#\n设置自定义数据目录\npython -m cli.main data-config --set /path/to/your/data\n#\n重置为默认配置\npython -m cli.main data-config --reset\n环境变量配置\n:\n#\nWindows\nset\nTRADING_AGENTS_DATA_DIR=C:\n\\M\nyTradingData\n#\nLinux/macOS\nexport\nTRADING_AGENTS_DATA_DIR=/home/user/trading_data\n程序化配置\n:\nfrom\ntradingagents\n.\nconfig_manager\nimport\nConfigManager\n# 设置数据目录\nconfig_manager\n=\nConfigManager\n()\nconfig_manager\n.\nset_data_directory\n(\n\"/path/to/data\"\n)\n# 获取配置\ndata_dir\n=\nconfig_manager\n.\nget_data_directory\n()\nprint\n(\nf\"数据目录:\n{\ndata_dir\n}\n\"\n)\n配置优先级\n: 程序设置 > 环境变量 > 配置文件 > 默认值\n详细说明请参考:\n📁 数据目录配置指南\n交互式分析\n#\n启动交互式命令行界面\npython -m cli.main\n🎯\n快速导航\n- 找到您需要的内容\n🎯\n我想要...\n📖\n推荐文档\n⏱️\n阅读时间\n快速上手\n🚀 快速开始\n10分钟\n了解架构\n🏛️ 系统架构\n15分钟\n看代码示例\n📚 基础示例\n20分钟\n解决问题\n🆘 常见问题\n5分钟\n深度学习\n📁 完整文档目录\n2小时+\n💡\n提示\n: 我们的\ndocs/\n目录包含了\n50,000+字\n的详细中文文档，这是与原版最大的区别！\n📚 完整文档体系 - 核心亮点\n🌟 这是本项目与原版最大的区别！\n我们构建了业界最完整的中文金融AI框架文档体系，包含超过\n50,000字\n的详细技术文档，\n20+\n个专业文档文件，\n100+\n个代码示例。\n🎯 为什么选择我们的文档？\n对比维度\n原版 TradingAgents\n🚀\n中文增强版\n文档语言\n英文基础说明\n完整中文体系\n文档深度\n简单介绍\n深度技术剖析\n架构说明\n概念性描述\n详细设计文档 + 架构图\n使用指南\n基础示例\n从入门到专家的完整路径\n故障排除\n无\n详细FAQ + 解决方案\n代码示例\n少量示例\n100+ 实用示例\n📖 文档导航 - 按学习路径组织\n🚀\n新手入门路径\n(推荐从这里开始)\n📋 项目概述\n-\n了解项目背景和核心价值\n⚙️ 详细安装\n-\n各平台详细安装指南\n🚀 快速开始\n-\n10分钟上手指南\n📚 基础示例\n-\n8个实用的入门示例\n🏗️\n架构理解路径\n(深入了解系统设计)\n🏛️ 系统架构\n-\n完整的系统架构设计\n🤖 智能体架构\n-\n多智能体协作机制\n📊 数据流架构\n-\n数据处理全流程\n🔄 图结构设计\n-\nLangGraph工作流程\n🤖\n智能体深度解析\n(了解每个智能体的设计)\n📈 分析师团队\n-\n四类专业分析师详解\n🔬 研究员团队\n-\n看涨/看跌辩论机制\n💼 交易员智能体\n-\n交易决策制定流程\n🛡️ 风险管理\n-\n多层次风险评估\n👔 管理层智能体\n-\n协调和决策管理\n📊\n数据处理专题\n(掌握数据处理技术)\n🔌 数据源集成\n-\n多数据源API集成\n⚙️ 数据处理流程\n-\n数据清洗和转换\n💾 缓存策略\n-\n多层缓存优化性能\n⚙️\n配置和优化\n(性能调优和定制)\n📝 配置指南\n-\n详细配置选项说明\n🧠 LLM配置\n-\n大语言模型优化\n💡\n高级应用\n(扩展开发和实战)\n📚 基础示例\n-\n8个实用基础示例\n🚀 高级示例\n-\n复杂场景和扩展开发\n❓\n问题解决\n(遇到问题时查看)\n🆘 常见问题\n-\n详细FAQ和解决方案\n📊 文档统计数据\n📄\n文档文件数\n: 20+ 个专业文档\n📝\n总字数\n: 50,000+ 字详细内容\n💻\n代码示例\n: 100+ 个实用示例\n📈\n架构图表\n: 10+ 个专业图表\n🎯\n覆盖范围\n: 从入门到专家的完整路径\n🎨 文档特色\n🇨🇳 完全中文化\n: 专为中文用户优化的表达方式\n📊 图文并茂\n: 丰富的架构图和流程图\n💻 代码丰富\n: 每个概念都有对应的代码示例\n🔍 深度剖析\n: 不仅告诉你怎么做，还告诉你为什么这样做\n🛠️ 实用导向\n: 所有文档都面向实际应用场景\n📚 详细文档目录\n📁\ndocs/ 目录结构\n- 完整的知识体系\ndocs/\n├── 📖 overview/              # 项目概览 - 新手必读\n│   ├── project-overview.md   # 📋 项目详细介绍\n│   ├── quick-start.md        # 🚀 10分钟快速上手\n│   └── installation.md       # ⚙️ 详细安装指南\n│\n├── 🏗️ architecture/          # 系统架构 - 深度理解\n│   ├── system-architecture.md    # 🏛️ 整体架构设计\n│   ├── agent-architecture.md     # 🤖 智能体协作机制\n│   ├── data-flow-architecture.md # 📊 数据流处理架构\n│   └── graph-structure.md        # 🔄 LangGraph工作流\n│\n├── 🤖 agents/               # 智能体详解 - 核心组件\n│   ├── analysts.md          # 📈 四类专业分析师\n│   ├── researchers.md       # 🔬 看涨/看跌辩论机制\n│   ├── trader.md           # 💼 交易决策制定\n│   ├── risk-management.md  # 🛡️ 多层风险评估\n│   └── managers.md         # 👔 管理层协调\n│\n├── 📊 data/                 # 数据处理 - 技术核心\n│   ├── data-sources.md      # 🔌 多数据源集成\n│   ├── data-processing.md   # ⚙️ 数据处理流程\n│   └── caching.md          # 💾 缓存优化策略\n│\n├── ⚙️ configuration/        # 配置优化 - 性能调优\n│   ├── config-guide.md      # 📝 详细配置说明\n│   └── llm-config.md       # 🧠 LLM模型优化\n│\n├── 💡 examples/             # 示例教程 - 实战应用\n│   ├── basic-examples.md    # 📚 8个基础示例\n│   └── advanced-examples.md # 🚀 高级开发示例\n│\n└── ❓ faq/                  # 问题解决 - 疑难解答\n    └── faq.md              # 🆘 常见问题FAQ\n🎯\n重点推荐文档\n(必读精选)\n🔥\n最受欢迎的文档\n📋 项目概述\n- ⭐⭐⭐⭐⭐\n了解项目的核心价值和技术特色，5分钟读懂整个框架\n🏛️ 系统架构\n- ⭐⭐⭐⭐⭐\n深度解析多智能体协作机制，包含详细架构图\n📚 基础示例\n- ⭐⭐⭐⭐⭐\n8个实用示例，从股票分析到投资组合优化\n🚀\n技术深度文档\n🤖 智能体架构\n多智能体设计模式和协作机制详解\n📊 数据流架构\n数据获取、处理、缓存的完整流程\n🔬 研究员团队\n看涨/看跌研究员辩论机制的创新设计\n💼\n实用工具文档\n🌐 Web界面指南\n- ⭐⭐⭐⭐⭐\n完整的Web界面使用教程，包含5级研究深度详细说明\n💰 投资分析指南\n从基础到高级的完整投资分析教程\n🧠 LLM配置\n多LLM模型配置和成本优化策略\n💾 缓存策略\n多层缓存设计，显著降低API调用成本\n🆘 常见问题\n详细的FAQ和故障排除指南\n📖\n按模块浏览文档\n📖 概览文档\n- 项目入门必读\n📋 项目概述\n- 详细的项目背景和特性介绍\n🚀 快速开始\n- 从安装到第一次运行的完整指南\n⚙️ 详细安装\n- 各平台详细安装说明\n🏗️ 架构文档\n- 深度理解系统设计\n🏛️ 系统架构\n- 完整的系统架构设计\n🤖 智能体架构\n- 智能体设计模式和协作机制\n📊 数据流架构\n- 数据获取、处理和分发流程\n🔄 图结构设计\n- LangGraph工作流程设计\n🤖 智能体文档\n- 核心组件详解\n📈 分析师团队\n- 四类专业分析师详解\n🔬 研究员团队\n- 看涨/看跌研究员和辩论机制\n💼 交易员智能体\n- 交易决策制定流程\n🛡️ 风险管理\n- 多层次风险评估体系\n👔 管理层智能体\n- 协调和决策管理\n📊 数据处理\n- 技术核心实现\n🔌 数据源集成\n- 支持的数据源和API集成\n⚙️ 数据处理流程\n- 数据清洗、转换和验证\n💾 缓存策略\n- 多层缓存优化性能\n⚙️ 配置与部署\n- 性能调优指南\n📝 配置指南\n- 详细的配置选项说明\n🧠 LLM配置\n- 大语言模型配置优化\n💡 示例和教程\n- 实战应用指南\n📚 基础示例\n- 8个实用的基础示例\n🚀 高级示例\n- 复杂场景和扩展开发\n❓ 帮助文档\n- 问题解决方案\n🆘 常见问题\n- 详细的FAQ和解决方案\n💰 成本控制\n典型使用成本\n经济模式\n: $0.01-0.05/次分析 (使用 gpt-4o-mini)\n标准模式\n: $0.05-0.15/次分析 (使用 gpt-4o)\n高精度模式\n: $0.10-0.30/次分析 (使用 gpt-4o + 多轮辩论)\n成本优化建议\n# 低成本配置示例\ncost_optimized_config\n=\n{\n\"deep_think_llm\"\n:\n\"gpt-4o-mini\"\n,\n\"quick_think_llm\"\n:\n\"gpt-4o-mini\"\n,\n\"max_debate_rounds\"\n:\n1\n,\n\"online_tools\"\n:\nFalse\n# 使用缓存数据\n}\n🤝 贡献指南\n我们欢迎各种形式的贡献：\n贡献类型\n🐛\nBug修复\n- 发现并修复问题\n✨\n新功能\n- 添加新的功能特性\n📚\n文档改进\n- 完善文档和教程\n🌐\n本地化\n- 翻译和本地化工作\n🎨\n代码优化\n- 性能优化和代码重构\n贡献流程\nFork 本仓库\n创建特性分支 (\ngit checkout -b feature/AmazingFeature\n)\n提交更改 (\ngit commit -m 'Add some AmazingFeature'\n)\n推送到分支 (\ngit push origin feature/AmazingFeature\n)\n创建 Pull Request\n📋 查看贡献者\n查看所有贡献者和详细贡献内容：\n🤝 贡献者名单\n📄 许可证\n本项目基于 Apache 2.0 许可证开源。详见\nLICENSE\n文件。\n许可证说明\n✅ 商业使用\n✅ 修改和分发\n✅ 私人使用\n✅ 专利使用\n❗ 需要保留版权声明\n❗ 需要包含许可证副本\n🙏 致谢与感恩\n🌟 向源项目开发者致敬\n我们向\nTauric Research\n团队表达最深的敬意和感谢：\n🎯 愿景领导者\n: 感谢您们在AI金融领域的前瞻性思考和创新实践\n💎 珍贵源码\n: 感谢您们开源的每一行代码，它们凝聚着无数的智慧和心血\n🏗️ 架构大师\n: 感谢您们设计了如此优雅、可扩展的多智能体框架\n💡 技术先驱\n: 感谢您们将前沿AI技术与金融实务完美结合\n🔄 持续贡献\n: 感谢您们持续的维护、更新和改进工作\n🤝 社区贡献者致谢\n感谢所有为TradingAgents-CN项目做出贡献的开发者和用户！\n详细的贡献者名单和贡献内容请查看：\n📋 贡献者名单\n包括但不限于：\n🐳\nDocker容器化\n- 部署方案优化\n📄\n报告导出功能\n- 多格式输出支持\n🐛\nBug修复\n- 系统稳定性提升\n🔧\n代码优化\n- 用户体验改进\n📝\n文档完善\n- 使用指南和教程\n🌍\n社区建设\n- 问题反馈和推广\n🌍 开源贡献\n: 感谢您们选择Apache 2.0协议，给予开发者最大的自由\n📚 知识分享\n: 感谢您们提供的详细文档和最佳实践指导\n特别感谢\n：\nTradingAgents\n项目为我们提供了坚实的技术基础。虽然Apache 2.0协议赋予了我们使用源码的权利，但我们深知每一行代码的珍贵价值，将永远铭记并感谢您们的无私贡献。\n🇨🇳 推广使命的初心\n创建这个中文增强版本，我们怀着以下初心：\n🌉 技术传播\n: 让优秀的TradingAgents技术在中国得到更广泛的应用\n🎓 教育普及\n: 为中国的AI金融教育提供更好的工具和资源\n🤝 文化桥梁\n: 在中西方技术社区之间搭建交流合作的桥梁\n🚀 创新推动\n: 推动中国金融科技领域的AI技术创新和应用\n🌍 开源社区\n感谢所有为本项目贡献代码、文档、建议和反馈的开发者和用户。正是因为有了大家的支持，我们才能更好地服务中文用户社区。\n🤝 合作共赢\n我们承诺：\n尊重原创\n: 始终尊重源项目的知识产权和开源协议\n反馈贡献\n: 将有价值的改进和创新反馈给源项目和开源社区\n持续改进\n: 不断完善中文增强版本，提供更好的用户体验\n开放合作\n: 欢迎与源项目团队和全球开发者进行技术交流与合作\n📈 版本历史\nv0.1.13\n(2025-08-02): 🤖 原生OpenAI支持与Google AI生态系统全面集成 ✨\n最新版本\nv0.1.12\n(2025-07-29): 🧠 智能新闻分析模块与项目结构优化\nv0.1.11\n(2025-07-27): 🤖 多LLM提供商集成与模型选择持久化\nv0.1.10\n(2025-07-18): 🚀 Web界面实时进度显示与智能会话管理\nv0.1.9\n(2025-07-16): 🎯 CLI用户体验重大优化与统一日志管理\nv0.1.8\n(2025-07-15): 🎨 Web界面全面优化与用户体验提升\nv0.1.7\n(2025-07-13): 🐳 容器化部署与专业报告导出\nv0.1.6\n(2025-07-11): 🔧 阿里百炼修复与数据源升级\nv0.1.5\n(2025-07-08): 📊 添加Deepseek模型支持\nv0.1.4\n(2025-07-05): 🏗️ 架构优化与配置管理重构\nv0.1.3\n(2025-06-28): 🇨🇳 A股市场完整支持\nv0.1.2\n(2025-06-15): 🌐 Web界面和配置管理\nv0.1.1\n(2025-06-01): 🧠 国产LLM集成\n📋\n详细更新日志\n:\nCHANGELOG.md\n📞 联系方式\nGitHub Issues\n:\n提交问题和建议\n邮箱\n:\nhsliup@163.com\n项目ＱＱ群：782124367\n原项目\n:\nTauricResearch/TradingAgents\n文档\n:\n完整文档目录\n⚠️\n风险提示\n重要声明\n: 本框架仅用于研究和教育目的，不构成投资建议。\n📊 交易表现可能因多种因素而异\n🤖 AI模型的预测存在不确定性\n💰 投资有风险，决策需谨慎\n👨‍💼 建议咨询专业财务顾问\n🌟 如果这个项目对您有帮助，请给我们一个 Star！\n⭐ Star this repo\n|\n🍴 Fork this repo\n|\n📖 Read the docs",
    "readme": "# TradingAgents 中文增强版\n\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Python](https://img.shields.io/badge/Python-3.10%2B-blue.svg)](https://www.python.org/)\n[![Version](https://img.shields.io/badge/Version-cn--0.1.15-green.svg)](./VERSION)\n[![Documentation](https://img.shields.io/badge/docs-中文文档-green.svg)](./docs/)\n[![Original](https://img.shields.io/badge/基于-TauricResearch/TradingAgents-orange.svg)](https://github.com/TauricResearch/TradingAgents)\n\n> 🚀 **最新版本 cn-0.1.15**: 开发者体验与LLM生态系统大升级！新增千帆大模型支持、完整开发工具链、学术研究资料、企业级工作流规范！\n>\n> 🎯 **核心功能**: 原生OpenAI支持 | Google AI全面集成 | 自定义端点配置 | 智能模型选择 | 多LLM提供商支持 | 模型选择持久化 | Docker容器化部署 | 专业报告导出 | 完整A股支持 | 中文本地化\n\n基于多智能体大语言模型的**中文金融交易决策框架**。专为中文用户优化，提供完整的A股/港股/美股分析能力。\n\n## 🙏 致敬源项目\n\n感谢 [Tauric Research](https://github.com/TauricResearch) 团队创造的革命性多智能体交易框架 [TradingAgents](https://github.com/TauricResearch/TradingAgents)！\n\n**🎯 我们的使命**: 为中国用户提供完整的中文化体验，支持A股/港股市场，集成国产大模型，推动AI金融技术在中文社区的普及应用。\n\n## 🆕 v0.1.15 重大更新\n\n### 🤖 LLM生态系统大升级\n\n- **千帆大模型支持**: 新增百度千帆(ERNIE)大模型完整集成\n- **LLM适配器重构**: 统一的OpenAI兼容适配器架构\n- **多厂商支持**: 支持更多国产大模型提供商\n- **集成指南**: 完整的LLM集成开发文档和测试工具\n\n### 📚 学术研究支持\n\n- **TradingAgents论文**: 完整的中文翻译版本和深度解读\n- **技术博客**: 详细的技术分析和实现原理解读\n- **学术资料**: PDF论文和相关研究资料\n- **引用支持**: 标准的学术引用格式和参考文献\n\n### 🛠️ 开发者体验升级\n\n- **开发工作流**: 标准化的开发流程和分支管理规范\n- **安装验证**: 完整的安装测试和验证脚本\n- **文档重构**: 结构化的文档系统和快速开始指南\n- **PR模板**: 标准化的Pull Request模板和代码审查流程\n\n### 🔧 企业级工具链\n\n- **分支保护**: GitHub分支保护策略和安全规则\n- **紧急程序**: 完整的紧急处理和故障恢复程序\n- **测试框架**: 增强的测试覆盖和验证工具\n- **部署指南**: 企业级部署和配置管理\n\n## 📋 v0.1.14 功能回顾\n\n### 👥 用户权限管理系统\n\n- **完整用户管理**: 新增用户注册、登录、权限控制功能\n- **角色权限**: 支持多级用户角色和权限管理\n- **会话管理**: 安全的用户会话和状态管理\n- **用户活动日志**: 完整的用户操作记录和审计功能\n\n### 🔐 Web用户认证系统\n\n- **登录组件**: 现代化的用户登录界面\n- **认证管理器**: 统一的用户认证和授权管理\n- **安全增强**: 密码加密、会话安全等安全机制\n- **用户仪表板**: 个性化的用户活动仪表板\n\n### 🗄️ 数据管理优化\n\n- **MongoDB集成增强**: 改进的MongoDB连接和数据管理\n- **数据目录重组**: 优化的数据存储结构和管理\n- **数据迁移脚本**: 完整的数据迁移和备份工具\n- **缓存优化**: 提升数据加载和分析结果缓存性能\n\n### 🧪 测试覆盖增强\n\n- **功能测试脚本**: 新增6个专项功能测试脚本\n- **工具处理器测试**: Google工具处理器修复验证\n- **引导自动隐藏测试**: UI交互功能测试\n- **在线工具配置测试**: 工具配置和选择逻辑测试\n- **真实场景测试**: 实际使用场景的端到端测试\n- **美股独立性测试**: 美股分析功能独立性验证\n\n---\n\n## 🆕 v0.1.13 重大更新\n\n### 🤖 原生OpenAI端点支持\n\n- **自定义OpenAI端点**: 支持配置任意OpenAI兼容的API端点\n- **灵活模型选择**: 可以使用任何OpenAI格式的模型，不限于官方模型\n- **智能适配器**: 新增原生OpenAI适配器，提供更好的兼容性和性能\n- **配置管理**: 统一的端点和模型配置管理系统\n\n### 🧠 Google AI生态系统全面集成\n\n- **三大Google AI包支持**: langchain-google-genai、google-generativeai、google-genai\n- **9个验证模型**: gemini-2.5-pro, gemini-2.5-flash, gemini-2.0-flash等最新模型\n- **Google工具处理器**: 专门的Google AI工具调用处理器\n- **智能降级机制**: 高级功能失败时自动降级到基础功能\n\n### 🔧 LLM适配器架构优化\n\n- **GoogleOpenAIAdapter**: 新增Google AI的OpenAI兼容适配器\n- **统一接口**: 所有LLM提供商使用统一的调用接口\n- **错误处理增强**: 改进的异常处理和自动重试机制\n- **性能监控**: 添加LLM调用性能监控和统计\n\n### 🎨 Web界面智能优化\n\n- **智能模型选择**: 根据可用性自动选择最佳模型\n- **KeyError修复**: 彻底解决模型选择中的KeyError问题\n- **UI响应优化**: 改进模型切换的响应速度和用户体验\n- **错误提示**: 更友好的错误提示和解决建议\n\n## 🆕 v0.1.12 重大更新\n\n### 🧠 智能新闻分析模块\n\n- **智能新闻过滤器**: 基于AI的新闻相关性评分和质量评估\n- **多层次过滤机制**: 基础过滤、增强过滤、集成过滤三级处理\n- **新闻质量评估**: 自动识别和过滤低质量、重复、无关新闻\n- **统一新闻工具**: 整合多个新闻源，提供统一的新闻获取接口\n\n### 🔧 技术修复和优化\n\n- **DashScope适配器修复**: 解决工具调用兼容性问题\n- **DeepSeek死循环修复**: 修复新闻分析师的无限循环问题\n- **LLM工具调用增强**: 提升工具调用的可靠性和稳定性\n- **新闻检索器优化**: 增强新闻数据获取和处理能力\n\n### 📚 完善测试和文档\n\n- **全面测试覆盖**: 新增15+个测试文件，覆盖所有新功能\n- **详细技术文档**: 新增8个技术分析报告和修复文档\n- **用户指南完善**: 新增新闻过滤使用指南和最佳实践\n- **演示脚本**: 提供完整的新闻过滤功能演示\n\n### 🗂️ 项目结构优化\n\n- **文档分类整理**: 按功能将文档分类到docs子目录\n- **示例代码归位**: 演示脚本统一到examples目录\n- **根目录整洁**: 保持根目录简洁，提升项目专业度\n\n## 🎯 核心特性\n\n### 🤖 多智能体协作架构\n\n- **专业分工**: 基本面、技术面、新闻面、社交媒体四大分析师\n- **结构化辩论**: 看涨/看跌研究员进行深度分析\n- **智能决策**: 交易员基于所有输入做出最终投资建议\n- **风险管理**: 多层次风险评估和管理机制\n\n## 🖥️ Web界面展示\n\n### 📸 界面截图\n\n> 🎨 **现代化Web界面**: 基于Streamlit构建的响应式Web应用，提供直观的股票分析体验\n\n#### 🏠 主界面 - 分析配置\n\n![1755003162925](https://raw.githubusercontent.com/hsliuping/TradingAgents-CN/main/images/README/1755003162925.png)\n\n![1755002619976](https://raw.githubusercontent.com/hsliuping/TradingAgents-CN/main/images/README/1755002619976.png)\n\n*智能配置面板，支持多市场股票分析，5级研究深度选择*\n\n#### 📊 实时分析进度\n\n![1755002731483](https://raw.githubusercontent.com/hsliuping/TradingAgents-CN/main/images/README/1755002731483.png)\n\n*实时进度跟踪，可视化分析过程，智能时间预估*\n\n#### 📈 分析结果展示\n\n![1755002901204](https://raw.githubusercontent.com/hsliuping/TradingAgents-CN/main/images/README/1755002901204.png)\n\n![1755002924844](https://raw.githubusercontent.com/hsliuping/TradingAgents-CN/main/images/README/1755002924844.png)\n\n![1755002939905](https://raw.githubusercontent.com/hsliuping/TradingAgents-CN/main/images/README/1755002939905.png)\n\n![1755002968608](https://raw.githubusercontent.com/hsliuping/TradingAgents-CN/main/images/README/1755002968608.png)\n\n![1755002985903](https://raw.githubusercontent.com/hsliuping/TradingAgents-CN/main/images/README/1755002985903.png)\n\n![1755003004403](https://raw.githubusercontent.com/hsliuping/TradingAgents-CN/main/images/README/1755003004403.png)\n\n![1755003019759](https://raw.githubusercontent.com/hsliuping/TradingAgents-CN/main/images/README/1755003019759.png)\n\n![1755003033939](https://raw.githubusercontent.com/hsliuping/TradingAgents-CN/main/images/README/1755003033939.png)\n\n![1755003048242](https://raw.githubusercontent.com/hsliuping/TradingAgents-CN/main/images/README/1755003048242.png)\n\n![1755003064598](https://raw.githubusercontent.com/hsliuping/TradingAgents-CN/main/images/README/1755003064598.png)\n\n![1755003090603](https://raw.githubusercontent.com/hsliuping/TradingAgents-CN/main/images/README/1755003090603.png)\n\n*专业投资报告，多维度分析结果，一键导出功能*\n\n### 🎯 核心功能特色\n\n#### 📋 **智能分析配置**\n\n- **🌍 多市场支持**: 美股、A股、港股一站式分析\n- **🎯 5级研究深度**: 从2分钟快速分析到25分钟全面研究\n- **🤖 智能体选择**: 市场技术、基本面、新闻、社交媒体分析师\n- **📅 灵活时间设置**: 支持历史任意时间点分析\n\n#### 🚀 **实时进度跟踪**\n\n- **📊 可视化进度**: 实时显示分析进展和剩余时间\n- **🔄 智能步骤识别**: 自动识别当前分析阶段\n- **⏱️ 准确时间预估**: 基于历史数据的智能时间计算\n- **💾 状态持久化**: 页面刷新不丢失分析进度\n\n#### 📈 **专业结果展示**\n\n- **🎯 投资决策**: 明确的买入/持有/卖出建议\n- **📊 多维分析**: 技术面、基本面、新闻面综合评估\n- **🔢 量化指标**: 置信度、风险评分、目标价位\n- **📄 专业报告**: 支持Markdown/Word/PDF格式导出\n\n#### 🤖 **多LLM模型管理**\n\n- **🌐 4大提供商**: DashScope、DeepSeek、Google AI、OpenRouter\n- **🎯 60+模型选择**: 从经济型到旗舰级模型全覆盖\n- **💾 配置持久化**: URL参数存储，刷新保持设置\n- **⚡ 快速切换**: 5个热门模型一键选择按钮\n\n### 🎮 Web界面操作指南\n\n#### 🚀 **快速开始流程**\n\n1. **启动应用**: `python start_web.py` 或 `docker-compose up -d`\n2. **访问界面**: 浏览器打开 `http://localhost:8501`\n3. **配置模型**: 侧边栏选择LLM提供商和模型\n4. **输入股票**: 输入股票代码（如 AAPL、000001、0700.HK）\n5. **选择深度**: 根据需求选择1-5级研究深度\n6. **开始分析**: 点击\"🚀 开始分析\"按钮\n7. **查看结果**: 实时跟踪进度，查看分析报告\n8. **导出报告**: 一键导出专业格式报告\n\n#### 📊 **支持的股票代码格式**\n\n- **🇺🇸 美股**: `AAPL`, `TSLA`, `MSFT`, `NVDA`, `GOOGL`\n- **🇨🇳 A股**: `000001`, `600519`, `300750`, `002415`\n- **🇭🇰 港股**: `0700.HK`, `9988.HK`, `3690.HK`, `1810.HK`\n\n#### 🎯 **研究深度说明**\n\n- **1级 (2-4分钟)**: 快速概览，基础技术指标\n- **2级 (4-6分钟)**: 标准分析，技术+基本面\n- **3级 (6-10分钟)**: 深度分析，加入新闻情绪 ⭐ **推荐**\n- **4级 (10-15分钟)**: 全面分析，多轮智能体辩论\n- **5级 (15-25分钟)**: 最深度分析，完整研究报告\n\n#### 💡 **使用技巧**\n\n- **🔄 实时刷新**: 分析过程中可随时刷新页面，进度不丢失\n- **📱 移动适配**: 支持手机和平板设备访问\n- **🎨 深色模式**: 自动适配系统主题设置\n- **⌨️ 快捷键**: 支持Enter键快速提交分析\n- **📋 历史记录**: 自动保存最近的分析配置\n\n> 📖 **详细指南**: 完整的Web界面使用说明请参考 [🖥️ Web界面详细使用指南](docs/usage/web-interface-detailed-guide.md)\n\n## 🎯 功能特性\n\n### 🚀  智能新闻分析✨ **v0.1.12重大升级**\n\n\n| 功能特性               | 状态        | 详细说明                                 |\n| ---------------------- | ----------- | ---------------------------------------- |\n| **🧠 智能新闻分析**    | 🆕 v0.1.12  | AI新闻过滤，质量评估，相关性分析         |\n| **🔧 新闻过滤器**      | 🆕 v0.1.12  | 多层次过滤，基础/增强/集成三级处理       |\n| **📰 统一新闻工具**    | 🆕 v0.1.12  | 整合多源新闻，统一接口，智能检索         |\n| **🤖 多LLM提供商**     | 🆕 v0.1.11  | 4大提供商，60+模型，智能分类管理         |\n| **💾 模型选择持久化**  | 🆕 v0.1.11  | URL参数存储，刷新保持，配置分享          |\n| **🎯 快速选择按钮**    | 🆕 v0.1.11  | 一键切换热门模型，提升操作效率           |\n| **📊 实时进度显示**    | ✅ v0.1.10  | 异步进度跟踪，智能步骤识别，准确时间计算 |\n| **💾 智能会话管理**    | ✅ v0.1.10  | 状态持久化，自动降级，跨页面恢复         |\n| **🎯 一键查看报告**    | ✅ v0.1.10  | 分析完成后一键查看，智能结果恢复         |\n| **🖥️ Streamlit界面** | ✅ 完整支持 | 现代化响应式界面，实时交互和数据可视化   |\n| **⚙️ 配置管理**      | ✅ 完整支持 | Web端API密钥管理，模型选择，参数配置     |\n\n### 🎨 CLI用户体验 ✨ **v0.1.9优化**\n\n\n| 功能特性                | 状态        | 详细说明                             |\n| ----------------------- | ----------- | ------------------------------------ |\n| **🖥️ 界面与日志分离** | ✅ 完整支持 | 用户界面清爽美观，技术日志独立管理   |\n| **🔄 智能进度显示**     | ✅ 完整支持 | 多阶段进度跟踪，防止重复提示         |\n| **⏱️ 时间预估功能**   | ✅ 完整支持 | 智能分析阶段显示预计耗时             |\n| **🌈 Rich彩色输出**     | ✅ 完整支持 | 彩色进度指示，状态图标，视觉效果提升 |\n\n### 🧠 LLM模型支持 ✨ **v0.1.13全面升级**\n\n\n| 模型提供商        | 支持模型                     | 特色功能                | 新增功能 |\n| ----------------- | ---------------------------- | ----------------------- | -------- |\n| **🇨🇳 阿里百炼** | qwen-turbo/plus/max          | 中文优化，成本效益高    | ✅ 集成  |\n| **🇨🇳 DeepSeek** | deepseek-chat                | 工具调用，性价比极高    | ✅ 集成  |\n| **🌍 Google AI**  | **9个验证模型**              | 最新Gemini 2.5系列      | 🆕 升级  |\n| ├─**最新旗舰**  | gemini-2.5-pro/flash         | 最新旗舰，超快响应      | 🆕 新增  |\n| ├─**稳定推荐**  | gemini-2.0-flash             | 推荐使用，平衡性能      | 🆕 新增  |\n| ├─**经典强大**  | gemini-1.5-pro/flash         | 经典稳定，高质量分析    | ✅ 集成  |\n| └─**轻量快速**  | gemini-2.5-flash-lite        | 轻量级任务，快速响应    | 🆕 新增  |\n| **🌐 原生OpenAI** | **自定义端点支持**           | 任意OpenAI兼容端点      | 🆕 新增  |\n| **🌐 OpenRouter** | **60+模型聚合平台**          | 一个API访问所有主流模型 | ✅ 集成  |\n| ├─**OpenAI**    | o4-mini-high, o3-pro, GPT-4o | 最新o系列，推理专业版   | ✅ 集成  |\n| ├─**Anthropic** | Claude 4 Opus/Sonnet/Haiku   | 顶级性能，平衡版本      | ✅ 集成  |\n| ├─**Meta**      | Llama 4 Maverick/Scout       | 最新Llama 4系列         | ✅ 集成  |\n| └─**自定义**    | 任意OpenRouter模型ID         | 无限扩展，个性化选择    | ✅ 集成  |\n\n**🎯 快速选择**: 5个热门模型快速按钮 | **💾 持久化**: URL参数存储，刷新保持 | **🔄 智能切换**: 一键切换不同提供商\n\n### 📊 数据源与市场\n\n\n| 市场类型      | 数据源                   | 覆盖范围                     |\n| ------------- | ------------------------ | ---------------------------- |\n| **🇨🇳 A股**  | Tushare, AkShare, 通达信 | 沪深两市，实时行情，财报数据 |\n| **🇭🇰 港股** | AkShare, Yahoo Finance   | 港交所，实时行情，基本面     |\n| **🇺🇸 美股** | FinnHub, Yahoo Finance   | NYSE, NASDAQ，实时数据       |\n| **📰 新闻**   | Google News              | 实时新闻，多语言支持         |\n\n### 🤖 智能体团队\n\n**分析师团队**: 📈市场分析 | 💰基本面分析 | 📰新闻分析 | 💬情绪分析\n**研究团队**: 🐂看涨研究员 | 🐻看跌研究员 | 🎯交易决策员\n**管理层**: 🛡️风险管理员 | 👔研究主管\n\n## 🚀 快速开始\n\n### 🐳 Docker部署 (推荐)\n\n```bash\n# 1. 克隆项目\ngit clone https://github.com/hsliuping/TradingAgents-CN.git\ncd TradingAgents-CN\n\n# 2. 配置环境变量\ncp .env.example .env\n# 编辑 .env 文件，填入API密钥\n\n# 3. 启动服务\n# 首次启动或代码变更时（需要构建镜像）\ndocker-compose up -d --build\n\n# 日常启动（镜像已存在，无代码变更）\ndocker-compose up -d\n\n# 智能启动（自动判断是否需要构建）\n# Windows环境\npowershell -ExecutionPolicy Bypass -File scripts\\smart_start.ps1\n\n# Linux/Mac环境\nchmod +x scripts/smart_start.sh && ./scripts/smart_start.sh\n\n# 4. 访问应用\n# Web界面: http://localhost:8501\n```\n\n### 💻 本地部署\n\n```bash\n# 1. 升级pip (重要！避免安装错误)\npython -m pip install --upgrade pip\n\n# 2. 安装依赖\npip install -e .\n\n# 3. 启动应用\npython start_web.py\n\n# 4. 访问 http://localhost:8501\n```\n\n### 📊 开始分析\n\n1. **选择模型**: DeepSeek V3 / 通义千问 / Gemini\n2. **输入股票**: `000001` (A股) / `AAPL` (美股) / `0700.HK` (港股)\n3. **开始分析**: 点击\"🚀 开始分析\"按钮\n4. **实时跟踪**: 观察实时进度和分析步骤\n5. **查看报告**: 点击\"📊 查看分析报告\"按钮\n6. **导出报告**: 支持Word/PDF/Markdown格式\n\n## 🔐 用户权限管理\n\n### 🔑 默认账号信息\n\n系统提供以下默认账号，首次启动时自动创建：\n\n| 用户名 | 密码 | 角色 | 权限说明 |\n|--------|------|------|----------|\n| **admin** | **admin123** | 管理员 | 完整系统权限，用户管理，系统配置 |\n| **user** | **user123** | 普通用户 | 股票分析，报告查看，基础功能 |\n\n> ⚠️ **安全提醒**: 首次登录后请立即修改默认密码！\n\n### 🛡️ 权限控制体系\n\n- **🔐 登录认证**: 基于用户名密码的安全认证\n- **👥 角色管理**: 管理员、普通用户等多级权限\n- **⏰ 会话管理**: 自动超时保护，安全登出\n- **📊 操作日志**: 完整的用户活动记录\n\n### 🛠️ 用户管理工具\n\n系统提供完整的命令行用户管理工具：\n\n#### Windows 用户\n```powershell\n# 使用 PowerShell 脚本\n.\\scripts\\user_manager.ps1 list                    # 列出所有用户\n.\\scripts\\user_manager.ps1 change-password admin   # 修改密码\n.\\scripts\\user_manager.ps1 create newuser trader  # 创建新用户\n.\\scripts\\user_manager.ps1 delete olduser         # 删除用户\n\n# 或使用批处理文件\n.\\scripts\\user_manager.bat list\n```\n\n#### Python 脚本（跨平台）\n```bash\n# 直接使用 Python 脚本\npython scripts/user_password_manager.py list\npython scripts/user_password_manager.py change-password admin\npython scripts/user_password_manager.py create newuser --role trader\npython scripts/user_password_manager.py delete olduser\npython scripts/user_password_manager.py reset  # 重置为默认配置\n```\n\n### 📋 支持的用户操作\n\n- **📝 列出用户**: 查看所有用户及其角色权限\n- **🔑 修改密码**: 安全的密码更新机制\n- **👤 创建用户**: 支持自定义角色和权限\n- **🗑️ 删除用户**: 安全的用户删除功能\n- **🔄 重置配置**: 恢复默认用户设置\n\n### 📁 配置文件位置\n\n用户配置存储在：`web/config/users.json`\n\n> 📚 **详细文档**: 完整的用户管理指南请参考 [scripts/USER_MANAGEMENT.md](scripts/USER_MANAGEMENT.md)\n\n### 🚧 当前版本限制\n\n- ❌ 暂不支持在线用户注册\n- ❌ 暂不支持Web界面的角色管理\n- ✅ 支持完整的命令行用户管理\n- ✅ 支持完整的权限控制框架\n\n---\n\n## 🎯 核心优势\n\n- **🧠 智能新闻分析**: v0.1.12新增AI驱动的新闻过滤和质量评估系统\n- **🔧 多层次过滤**: 基础、增强、集成三级新闻过滤机制\n- **📰 统一新闻工具**: 整合多源新闻，提供统一的智能检索接口\n- **🆕 多LLM集成**: v0.1.11新增4大提供商，60+模型，一站式AI体验\n- **💾 配置持久化**: 模型选择真正持久化，URL参数存储，刷新保持\n- **🎯 快速切换**: 5个热门模型快速按钮，一键切换不同AI\n- **🆕 实时进度**: v0.1.10异步进度跟踪，告别黑盒等待\n- **💾 智能会话**: 状态持久化，页面刷新不丢失分析结果\n- **🔐 用户权限**: v0.1.14新增完整的用户认证和权限管理体系\n- **🇨🇳 中国优化**: A股/港股数据 + 国产LLM + 中文界面\n- **🐳 容器化**: Docker一键部署，环境隔离，快速扩展\n- **📄 专业报告**: 多格式导出，自动生成投资建议\n- **🛡️ 稳定可靠**: 多层数据源，智能降级，错误恢复\n\n## 🔧 技术架构\n\n**核心技术**: Python 3.10+ | LangChain | Streamlit | MongoDB | Redis\n**AI模型**: DeepSeek V3 | 阿里百炼 | Google AI | OpenRouter(60+模型) | OpenAI\n**数据源**: Tushare | AkShare | FinnHub | Yahoo Finance\n**部署**: Docker | Docker Compose | 本地部署\n\n## 📚 文档和支持\n\n- **📖 完整文档**: [docs/](./docs/) - 安装指南、使用教程、API文档\n- **🚨 故障排除**: [troubleshooting/](./docs/troubleshooting/) - 常见问题解决方案\n- **🔄 更新日志**: [CHANGELOG.md](./docs/releases/CHANGELOG.md) - 详细版本历史\n- **🚀 快速开始**: [QUICKSTART.md](./QUICKSTART.md) - 5分钟快速部署指南\n\n## 🆚 中文增强特色\n\n**相比原版新增**: 智能新闻分析 | 多层次新闻过滤 | 新闻质量评估 | 统一新闻工具 | 多LLM提供商集成 | 模型选择持久化 | 快速切换按钮 | | 实时进度显示 | 智能会话管理 | 中文界面 | A股数据 | 国产LLM | Docker部署 | 专业报告导出 | 统一日志管理 | Web配置界面 | 成本优化\n\n**Docker部署包含的服务**:\n\n- 🌐 **Web应用**: TradingAgents-CN主程序\n- 🗄️ **MongoDB**: 数据持久化存储\n- ⚡ **Redis**: 高速缓存\n- 📊 **MongoDB Express**: 数据库管理界面\n- 🎛️ **Redis Commander**: 缓存管理界面\n\n#### 💻 方式二：本地部署\n\n**适用场景**: 开发环境、自定义配置、离线使用\n\n### 环境要求\n\n- Python 3.10+ (推荐 3.11)\n- 4GB+ RAM (推荐 8GB+)\n- 稳定的网络连接\n\n### 安装步骤\n\n```bash\n# 1. 克隆项目\ngit clone https://github.com/hsliuping/TradingAgents-CN.git\ncd TradingAgents-CN\n\n# 2. 创建虚拟环境\npython -m venv env\n# Windows\nenv\\Scripts\\activate\n# Linux/macOS\nsource env/bin/activate\n\n# 3. 升级pip\npython -m pip install --upgrade pip\n\n# 4. 安装所有依赖\npip install -r requirements.txt\n#或者使用pip install -e .\npip install -e .\n\n# 注意：requirements.txt已包含所有必需依赖：\n# - 数据库支持 (MongoDB + Redis)\n# - 多市场数据源 (Tushare, AKShare, FinnHub等)\n# - Web界面和报告导出功能\n```\n\n### 配置API密钥\n\n#### 🇨🇳 推荐：使用阿里百炼（国产大模型）\n\n```bash\n# 复制配置模板\ncp .env.example .env\n\n# 编辑 .env 文件，配置以下必需的API密钥：\nDASHSCOPE_API_KEY=your_dashscope_api_key_here\nFINNHUB_API_KEY=your_finnhub_api_key_here\n\n# 推荐：Tushare API（专业A股数据）\nTUSHARE_TOKEN=your_tushare_token_here\nTUSHARE_ENABLED=true\n\n# 可选：其他AI模型API\nGOOGLE_API_KEY=your_google_api_key_here\nDEEPSEEK_API_KEY=your_deepseek_api_key_here\n\n# 数据库配置（可选，提升性能）\n# 本地部署使用标准端口\nMONGODB_ENABLED=false  # 设为true启用MongoDB\nREDIS_ENABLED=false    # 设为true启用Redis\nMONGODB_HOST=localhost\nMONGODB_PORT=27017     # 标准MongoDB端口\nREDIS_HOST=localhost\nREDIS_PORT=6379        # 标准Redis端口\n\n# Docker部署时需要修改主机名\n# MONGODB_HOST=mongodb\n# REDIS_HOST=redis\n```\n\n#### 📋 部署模式配置说明\n\n**本地部署模式**：\n\n```bash\n# 数据库配置（本地部署）\nMONGODB_ENABLED=true\nREDIS_ENABLED=true\nMONGODB_HOST=localhost      # 本地主机\nMONGODB_PORT=27017         # 标准端口\nREDIS_HOST=localhost       # 本地主机\nREDIS_PORT=6379           # 标准端口\n```\n\n**Docker部署模式**：\n\n```bash\n# 数据库配置（Docker部署）\nMONGODB_ENABLED=true\nREDIS_ENABLED=true\nMONGODB_HOST=mongodb       # Docker容器服务名\nMONGODB_PORT=27017        # 标准端口\nREDIS_HOST=redis          # Docker容器服务名\nREDIS_PORT=6379          # 标准端口\n```\n\n> 💡 **配置提示**：\n>\n> - 本地部署：需要手动启动MongoDB和Redis服务\n> - Docker部署：数据库服务通过docker-compose自动启动\n> - 端口冲突：如果本地已有数据库服务，可修改docker-compose.yml中的端口映射\n\n#### 🌍 可选：使用国外模型\n\n```bash\n# OpenAI (需要科学上网)\nOPENAI_API_KEY=your_openai_api_key\n\n# Anthropic (需要科学上网)\nANTHROPIC_API_KEY=your_anthropic_api_key\n```\n\n### 🗄️ 数据库配置（MongoDB + Redis）\n\n#### 高性能数据存储支持\n\n本项目支持 **MongoDB** 和 **Redis** 数据库，提供：\n\n- **📊 股票数据缓存**: 减少API调用，提升响应速度\n- **🔄 智能降级机制**: MongoDB → API → 本地缓存的多层数据源\n- **⚡ 高性能缓存**: Redis缓存热点数据，毫秒级响应\n- **🛡️ 数据持久化**: MongoDB存储历史数据，支持离线分析\n\n#### 数据库部署方式\n\n**🐳 Docker部署（推荐）**\n\n如果您使用Docker部署，数据库已自动包含在内：\n\n```bash\n# Docker部署会自动启动所有服务，包括：\ndocker-compose up -d --build\n# - Web应用 (端口8501)\n# - MongoDB (端口27017)\n# - Redis (端口6379)\n# - 数据库管理界面 (端口8081, 8082)\n```\n\n**💻 本地部署 - 数据库配置**\n\n如果您使用本地部署，可以选择以下方式：\n\n**方式一：仅启动数据库服务**\n\n```bash\n# 仅启动 MongoDB + Redis 服务（不启动Web应用）\ndocker-compose up -d mongodb redis mongo-express redis-commander\n\n# 查看服务状态\ndocker-compose ps\n\n# 停止服务\ndocker-compose down\n```\n\n**方式二：完全本地安装**\n\n```bash\n# 数据库依赖已包含在requirements.txt中，无需额外安装\n\n# 启动 MongoDB (默认端口 27017)\nmongod --dbpath ./data/mongodb\n\n# 启动 Redis (默认端口 6379)\nredis-server\n```\n\n> ⚠️ **重要说明**:\n>\n> - **🐳 Docker部署**: 数据库自动包含，无需额外配置\n> - **💻 本地部署**: 可选择仅启动数据库服务或完全本地安装\n> - **📋 推荐**: 使用Docker部署以获得最佳体验和一致性\n\n#### 数据库配置选项\n\n**环境变量配置**（推荐）：\n\n```bash\n# MongoDB 配置\nMONGODB_HOST=localhost\nMONGODB_PORT=27017\nMONGODB_DATABASE=trading_agents\nMONGODB_USERNAME=admin\nMONGODB_PASSWORD=your_password\n\n# Redis 配置\nREDIS_HOST=localhost\nREDIS_PORT=6379\nREDIS_PASSWORD=your_redis_password\nREDIS_DB=0\n```\n\n**配置文件方式**：\n\n```python\n# config/database_config.py\nDATABASE_CONFIG = {\n    'mongodb': {\n        'host': 'localhost',\n        'port': 27017,\n        'database': 'trading_agents',\n        'username': 'admin',\n        'password': 'your_password'\n    },\n    'redis': {\n        'host': 'localhost',\n        'port': 6379,\n        'password': 'your_redis_password',\n        'db': 0\n    }\n}\n```\n\n#### 数据库功能特性\n\n**MongoDB 功能**：\n\n- ✅ 股票基础信息存储\n- ✅ 历史价格数据缓存\n- ✅ 分析结果持久化\n- ✅ 用户配置管理\n- ✅ 自动数据同步\n\n**Redis 功能**：\n\n- ⚡ 实时价格数据缓存\n- ⚡ API响应结果缓存\n- ⚡ 会话状态管理\n- ⚡ 热点数据预加载\n- ⚡ 分布式锁支持\n\n#### 智能降级机制\n\n系统采用多层数据源降级策略，确保高可用性：\n\n```\n📊 数据获取流程：\n1. 🔍 检查 Redis 缓存 (毫秒级)\n2. 📚 查询 MongoDB 存储 (秒级)\n3. 🌐 调用通达信API (秒级)\n4. 💾 本地文件缓存 (备用)\n5. ❌ 返回错误信息\n```\n\n**配置降级策略**：\n\n```python\n# 在 .env 文件中配置\nENABLE_MONGODB=true\nENABLE_REDIS=true\nENABLE_FALLBACK=true\n\n# 缓存过期时间（秒）\nREDIS_CACHE_TTL=300\nMONGODB_CACHE_TTL=3600\n```\n\n#### 性能优化建议\n\n**生产环境配置**：\n\n```bash\n# MongoDB 优化\nMONGODB_MAX_POOL_SIZE=50\nMONGODB_MIN_POOL_SIZE=5\nMONGODB_MAX_IDLE_TIME=30000\n\n# Redis 优化\nREDIS_MAX_CONNECTIONS=20\nREDIS_CONNECTION_POOL_SIZE=10\nREDIS_SOCKET_TIMEOUT=5\n```\n\n#### 数据库管理工具\n\n```bash\n# 初始化数据库\npython scripts/setup/init_database.py\n\n# 系统状态检查\npython scripts/validation/check_system_status.py\n\n# 清理缓存工具\npython scripts/maintenance/cleanup_cache.py --days 7\n```\n\n#### 故障排除\n\n**常见问题解决**：\n\n1. **🪟 Windows 10 ChromaDB兼容性问题**\n\n   **问题现象**：在Windows 10上出现 `Configuration error: An instance of Chroma already exists for ephemeral with different settings` 错误，而Windows 11正常。\n\n   **快速解决方案**：\n\n   ```bash\n   # 方案1：禁用内存功能（推荐）\n   # 在 .env 文件中添加：\n   MEMORY_ENABLED=false\n\n   # 方案2：使用专用修复脚本\n   powershell -ExecutionPolicy Bypass -File scripts\\fix_chromadb_win10.ps1\n\n   # 方案3：管理员权限运行\n   # 右键PowerShell -> \"以管理员身份运行\"\n   ```\n\n   **详细解决方案**：参考 [Windows 10兼容性指南](docs/troubleshooting/windows10-chromadb-fix.md)\n2. **MongoDB连接失败**\n\n   **Docker部署**：\n\n   ```bash\n   # 检查服务状态\n   docker-compose logs mongodb\n\n   # 重启服务\n   docker-compose restart mongodb\n   ```\n\n   **本地部署**：\n\n   ```bash\n   # 检查MongoDB进程\n   ps aux | grep mongod\n\n   # 重启MongoDB\n   sudo systemctl restart mongod  # Linux\n   brew services restart mongodb  # macOS\n   ```\n3. **Redis连接超时**\n\n   ```bash\n   # 检查Redis状态\n   redis-cli ping\n\n   # 清理Redis缓存\n   redis-cli flushdb\n   ```\n4. **缓存问题**\n\n   ```bash\n   # 检查系统状态和缓存\n   python scripts/validation/check_system_status.py\n\n   # 清理过期缓存\n   python scripts/maintenance/cleanup_cache.py --days 7\n   ```\n\n> 💡 **提示**: 即使不配置数据库，系统仍可正常运行，会自动降级到API直接调用模式。数据库配置是可选的性能优化功能。\n\n> 📚 **详细文档**: 更多数据库配置信息请参考 [数据库架构文档](docs/architecture/database-architecture.md)\n\n### 📤 报告导出功能\n\n#### 新增功能：专业分析报告导出\n\n本项目现已支持将股票分析结果导出为多种专业格式：\n\n**支持的导出格式**：\n\n- **📄 Markdown (.md)** - 轻量级标记语言，适合技术用户和版本控制\n- **📝 Word (.docx)** - Microsoft Word文档，适合商务报告和进一步编辑\n- **📊 PDF (.pdf)** - 便携式文档格式，适合正式分享和打印\n\n**报告内容结构**：\n\n- 🎯 **投资决策摘要** - 买入/持有/卖出建议，置信度，风险评分\n- 📊 **详细分析报告** - 技术分析，基本面分析，市场情绪，新闻事件\n- ⚠️ **风险提示** - 完整的投资风险声明和免责条款\n- 📋 **配置信息** - 分析参数，模型信息，生成时间\n\n**使用方法**：\n\n1. 完成股票分析后，在结果页面底部找到\"📤 导出报告\"部分\n2. 选择需要的格式：Markdown、Word或PDF\n3. 点击导出按钮，系统自动生成并提供下载\n\n**安装导出依赖**：\n\n```bash\n# 安装Python依赖\npip install markdown pypandoc\n\n# 安装系统工具（用于PDF导出）\n# Windows: choco install pandoc wkhtmltopdf\n# macOS: brew install pandoc wkhtmltopdf\n# Linux: sudo apt-get install pandoc wkhtmltopdf\n```\n\n> 📚 **详细文档**: 完整的导出功能使用指南请参考 [导出功能指南](docs/EXPORT_GUIDE.md)\n\n### 🚀 启动应用\n\n#### 🐳 Docker启动（推荐）\n\n如果您使用Docker部署，应用已经自动启动：\n\n```bash\n# 应用已在Docker中运行，直接访问：\n# Web界面: http://localhost:8501\n# 数据库管理: http://localhost:8081\n# 缓存管理: http://localhost:8082\n\n# 查看运行状态\ndocker-compose ps\n\n# 查看日志\ndocker-compose logs -f web\n```\n\n#### 💻 本地启动\n\n如果您使用本地部署：\n\n```bash\n# 1. 激活虚拟环境\n# Windows\n.\\env\\Scripts\\activate\n# Linux/macOS\nsource env/bin/activate\n\n# 2. 安装项目到虚拟环境（重要！）\npip install -e .\n\n# 3. 启动Web管理界面\n# 方法1：使用项目启动脚本（推荐）\npython start_web.py\n\n# 方法2：使用原始启动脚本\npython web/run_web.py\n\n# 方法3：直接使用streamlit（需要先安装项目）\nstreamlit run web/app.py\n```\n\n然后在浏览器中访问 `http://localhost:8501`\n\n**Web界面特色功能**:\n\n- 🇺🇸 **美股分析**: 支持 AAPL, TSLA, NVDA 等美股代码\n- 🇨🇳 **A股分析**: 支持 000001, 600519, 300750 等A股代码\n- 📊 **实时数据**: 通达信API提供A股实时行情数据\n- 🤖 **智能体选择**: 可选择不同的分析师组合\n- 📤 **报告导出**: 一键导出Markdown/Word/PDF格式专业分析报告\n- 🎯 **5级研究深度**: 从快速分析(2-4分钟)到全面分析(15-25分钟)\n- 📊 **智能分析师选择**: 市场技术、基本面、新闻、社交媒体分析师\n- 🔄 **实时进度显示**: 可视化分析过程，避免等待焦虑\n- 📈 **结构化结果**: 投资建议、目标价位、置信度、风险评估\n- 🇨🇳 **完全中文化**: 界面和分析结果全中文显示\n\n**研究深度级别说明**:\n\n- **1级 - 快速分析** (2-4分钟): 日常监控，基础决策\n- **2级 - 基础分析** (4-6分钟): 常规投资，平衡速度\n- **3级 - 标准分析** (6-10分钟): 重要决策，推荐默认\n- **4级 - 深度分析** (10-15分钟): 重大投资，详细研究\n- **5级 - 全面分析** (15-25分钟): 最重要决策，最全面分析\n\n#### 💻 代码调用（适合开发者）\n\n```python\nfrom tradingagents.graph.trading_graph import TradingAgentsGraph\nfrom tradingagents.default_config import DEFAULT_CONFIG\n\n# 配置阿里百炼\nconfig = DEFAULT_CONFIG.copy()\nconfig[\"llm_provider\"] = \"dashscope\"\nconfig[\"deep_think_llm\"] = \"qwen-plus\"      # 深度分析\nconfig[\"quick_think_llm\"] = \"qwen-turbo\"    # 快速任务\n\n# 创建交易智能体\nta = TradingAgentsGraph(debug=True, config=config)\n\n# 分析股票 (以苹果公司为例)\nstate, decision = ta.propagate(\"AAPL\", \"2024-01-15\")\n\n# 输出分析结果\nprint(f\"推荐动作: {decision['action']}\")\nprint(f\"置信度: {decision['confidence']:.1%}\")\nprint(f\"风险评分: {decision['risk_score']:.1%}\")\nprint(f\"推理过程: {decision['reasoning']}\")\n```\n\n#### 快速启动脚本\n\n```bash\n# 阿里百炼演示（推荐中文用户）\npython examples/dashscope/demo_dashscope_chinese.py\n\n# 阿里百炼完整演示\npython examples/dashscope/demo_dashscope.py\n\n# 阿里百炼简化测试\npython examples/dashscope/demo_dashscope_simple.py\n\n# OpenAI演示（需要国外API）\npython examples/openai/demo_openai.py\n\n# 集成测试\npython tests/integration/test_dashscope_integration.py\n```\n\n#### 📁 数据目录配置\n\n**新功能**: 灵活配置数据存储路径，支持多种配置方式：\n\n```bash\n# 查看当前数据目录配置\npython -m cli.main data-config --show\n\n# 设置自定义数据目录\npython -m cli.main data-config --set /path/to/your/data\n\n# 重置为默认配置\npython -m cli.main data-config --reset\n```\n\n**环境变量配置**:\n\n```bash\n# Windows\nset TRADING_AGENTS_DATA_DIR=C:\\MyTradingData\n\n# Linux/macOS\nexport TRADING_AGENTS_DATA_DIR=/home/user/trading_data\n```\n\n**程序化配置**:\n\n```python\nfrom tradingagents.config_manager import ConfigManager\n\n# 设置数据目录\nconfig_manager = ConfigManager()\nconfig_manager.set_data_directory(\"/path/to/data\")\n\n# 获取配置\ndata_dir = config_manager.get_data_directory()\nprint(f\"数据目录: {data_dir}\")\n```\n\n**配置优先级**: 程序设置 > 环境变量 > 配置文件 > 默认值\n\n详细说明请参考: [📁 数据目录配置指南](docs/configuration/data-directory-configuration.md)\n\n### 交互式分析\n\n```bash\n# 启动交互式命令行界面\npython -m cli.main\n```\n\n## 🎯 **快速导航** - 找到您需要的内容\n\n\n| 🎯**我想要...** | 📖**推荐文档**                                            | ⏱️**阅读时间** |\n| --------------- | --------------------------------------------------------- | ---------------- |\n| **快速上手**    | [🚀 快速开始](docs/overview/quick-start.md)               | 10分钟           |\n| **了解架构**    | [🏛️ 系统架构](docs/architecture/system-architecture.md) | 15分钟           |\n| **看代码示例**  | [📚 基础示例](docs/examples/basic-examples.md)            | 20分钟           |\n| **解决问题**    | [🆘 常见问题](docs/faq/faq.md)                            | 5分钟            |\n| **深度学习**  | [📁 完整文档目录](#-详细文档目录)                         | 2小时+           |\n\n> 💡 **提示**: 我们的 `docs/` 目录包含了 **50,000+字** 的详细中文文档，这是与原版最大的区别！\n\n## 📚 完整文档体系 - 核心亮点\n\n> **🌟 这是本项目与原版最大的区别！** 我们构建了业界最完整的中文金融AI框架文档体系，包含超过 **50,000字** 的详细技术文档，**20+** 个专业文档文件，**100+** 个代码示例。\n\n### 🎯 为什么选择我们的文档？\n\n\n| 对比维度     | 原版 TradingAgents | 🚀**中文增强版**           |\n| ------------ | ------------------ | -------------------------- |\n| **文档语言** | 英文基础说明       | **完整中文体系**           |\n| **文档深度** | 简单介绍           | **深度技术剖析**           |\n| **架构说明** | 概念性描述         | **详细设计文档 + 架构图**  |\n| **使用指南** | 基础示例           | **从入门到专家的完整路径** |\n| **故障排除** | 无                 | **详细FAQ + 解决方案**     |\n| **代码示例** | 少量示例           | **100+ 实用示例**          |\n\n### 📖 文档导航 - 按学习路径组织\n\n#### 🚀 **新手入门路径** (推荐从这里开始)\n\n1. [📋 项目概述](docs/overview/project-overview.md) - **了解项目背景和核心价值**\n2. [⚙️ 详细安装](docs/overview/installation.md) - **各平台详细安装指南**\n3. [🚀 快速开始](docs/overview/quick-start.md) - **10分钟上手指南**\n4. [📚 基础示例](docs/examples/basic-examples.md) - **8个实用的入门示例**\n\n#### 🏗️ **架构理解路径** (深入了解系统设计)\n\n1. [🏛️ 系统架构](docs/architecture/system-architecture.md) - **完整的系统架构设计**\n2. [🤖 智能体架构](docs/architecture/agent-architecture.md) - **多智能体协作机制**\n3. [📊 数据流架构](docs/architecture/data-flow-architecture.md) - **数据处理全流程**\n4. [🔄 图结构设计](docs/architecture/graph-structure.md) - **LangGraph工作流程**\n\n#### 🤖 **智能体深度解析** (了解每个智能体的设计)\n\n1. [📈 分析师团队](docs/agents/analysts.md) - **四类专业分析师详解**\n2. [🔬 研究员团队](docs/agents/researchers.md) - **看涨/看跌辩论机制**\n3. [💼 交易员智能体](docs/agents/trader.md) - **交易决策制定流程**\n4. [🛡️ 风险管理](docs/agents/risk-management.md) - **多层次风险评估**\n5. [👔 管理层智能体](docs/agents/managers.md) - **协调和决策管理**\n\n#### 📊 **数据处理专题** (掌握数据处理技术)\n\n1. [🔌 数据源集成](docs/data/data-sources.md) - **多数据源API集成**\n2. [⚙️ 数据处理流程](docs/data/data-processing.md) - **数据清洗和转换**\n3. [💾 缓存策略](docs/data/caching.md) - **多层缓存优化性能**\n\n#### ⚙️ **配置和优化** (性能调优和定制)\n\n1. [📝 配置指南](docs/configuration/config-guide.md) - **详细配置选项说明**\n2. [🧠 LLM配置](docs/configuration/llm-config.md) - **大语言模型优化**\n\n#### 💡 **高级应用** (扩展开发和实战)\n\n1. [📚 基础示例](docs/examples/basic-examples.md) - **8个实用基础示例**\n2. [🚀 高级示例](docs/examples/advanced-examples.md) - **复杂场景和扩展开发**\n\n#### ❓ **问题解决** (遇到问题时查看)\n\n1. [🆘 常见问题](docs/faq/faq.md) - **详细FAQ和解决方案**\n\n### 📊 文档统计数据\n\n- 📄 **文档文件数**: 20+ 个专业文档\n- 📝 **总字数**: 50,000+ 字详细内容\n- 💻 **代码示例**: 100+ 个实用示例\n- 📈 **架构图表**: 10+ 个专业图表\n- 🎯 **覆盖范围**: 从入门到专家的完整路径\n\n### 🎨 文档特色\n\n- **🇨🇳 完全中文化**: 专为中文用户优化的表达方式\n- **📊 图文并茂**: 丰富的架构图和流程图\n- **💻 代码丰富**: 每个概念都有对应的代码示例\n- **🔍 深度剖析**: 不仅告诉你怎么做，还告诉你为什么这样做\n- **🛠️ 实用导向**: 所有文档都面向实际应用场景\n\n---\n\n## 📚 详细文档目录\n\n### 📁 **docs/ 目录结构** - 完整的知识体系\n\n```\ndocs/\n├── 📖 overview/              # 项目概览 - 新手必读\n│   ├── project-overview.md   # 📋 项目详细介绍\n│   ├── quick-start.md        # 🚀 10分钟快速上手\n│   └── installation.md       # ⚙️ 详细安装指南\n│\n├── 🏗️ architecture/          # 系统架构 - 深度理解\n│   ├── system-architecture.md    # 🏛️ 整体架构设计\n│   ├── agent-architecture.md     # 🤖 智能体协作机制\n│   ├── data-flow-architecture.md # 📊 数据流处理架构\n│   └── graph-structure.md        # 🔄 LangGraph工作流\n│\n├── 🤖 agents/               # 智能体详解 - 核心组件\n│   ├── analysts.md          # 📈 四类专业分析师\n│   ├── researchers.md       # 🔬 看涨/看跌辩论机制\n│   ├── trader.md           # 💼 交易决策制定\n│   ├── risk-management.md  # 🛡️ 多层风险评估\n│   └── managers.md         # 👔 管理层协调\n│\n├── 📊 data/                 # 数据处理 - 技术核心\n│   ├── data-sources.md      # 🔌 多数据源集成\n│   ├── data-processing.md   # ⚙️ 数据处理流程\n│   └── caching.md          # 💾 缓存优化策略\n│\n├── ⚙️ configuration/        # 配置优化 - 性能调优\n│   ├── config-guide.md      # 📝 详细配置说明\n│   └── llm-config.md       # 🧠 LLM模型优化\n│\n├── 💡 examples/             # 示例教程 - 实战应用\n│   ├── basic-examples.md    # 📚 8个基础示例\n│   └── advanced-examples.md # 🚀 高级开发示例\n│\n└── ❓ faq/                  # 问题解决 - 疑难解答\n    └── faq.md              # 🆘 常见问题FAQ\n```\n\n### 🎯 **重点推荐文档** (必读精选)\n\n#### 🔥 **最受欢迎的文档**\n\n1. **[📋 项目概述](docs/overview/project-overview.md)** - ⭐⭐⭐⭐⭐\n\n   > 了解项目的核心价值和技术特色，5分钟读懂整个框架\n   >\n2. **[🏛️ 系统架构](docs/architecture/system-architecture.md)** - ⭐⭐⭐⭐⭐\n\n   > 深度解析多智能体协作机制，包含详细架构图\n   >\n3. **[📚 基础示例](docs/examples/basic-examples.md)** - ⭐⭐⭐⭐⭐\n\n   > 8个实用示例，从股票分析到投资组合优化\n   >\n\n#### 🚀 **技术深度文档**\n\n1. **[🤖 智能体架构](docs/architecture/agent-architecture.md)**\n\n   > 多智能体设计模式和协作机制详解\n   >\n2. **[📊 数据流架构](docs/architecture/data-flow-architecture.md)**\n\n   > 数据获取、处理、缓存的完整流程\n   >\n3. **[🔬 研究员团队](docs/agents/researchers.md)**\n\n   > 看涨/看跌研究员辩论机制的创新设计\n   >\n\n#### 💼 **实用工具文档**\n\n1. **[🌐 Web界面指南](docs/usage/web-interface-guide.md)** - ⭐⭐⭐⭐⭐\n\n   > 完整的Web界面使用教程，包含5级研究深度详细说明\n   >\n2. **[💰 投资分析指南](docs/usage/investment_analysis_guide.md)**\n\n   > 从基础到高级的完整投资分析教程\n   >\n3. **[🧠 LLM配置](docs/configuration/llm-config.md)**\n\n   > 多LLM模型配置和成本优化策略\n   >\n4. **[💾 缓存策略](docs/data/caching.md)**\n\n   > 多层缓存设计，显著降低API调用成本\n   >\n5. **[🆘 常见问题](docs/faq/faq.md)**\n\n   > 详细的FAQ和故障排除指南\n   >\n\n### 📖 **按模块浏览文档**\n\n<details>\n<summary><strong>📖 概览文档</strong> - 项目入门必读</summary>\n\n- [📋 项目概述](docs/overview/project-overview.md) - 详细的项目背景和特性介绍\n- [🚀 快速开始](docs/overview/quick-start.md) - 从安装到第一次运行的完整指南\n- [⚙️ 详细安装](docs/overview/installation.md) - 各平台详细安装说明\n\n</details>\n\n<details>\n<summary><strong>🏗️ 架构文档</strong> - 深度理解系统设计</summary>\n\n- [🏛️ 系统架构](docs/architecture/system-architecture.md) - 完整的系统架构设计\n- [🤖 智能体架构](docs/architecture/agent-architecture.md) - 智能体设计模式和协作机制\n- [📊 数据流架构](docs/architecture/data-flow-architecture.md) - 数据获取、处理和分发流程\n- [🔄 图结构设计](docs/architecture/graph-structure.md) - LangGraph工作流程设计\n\n</details>\n\n<details>\n<summary><strong>🤖 智能体文档</strong> - 核心组件详解</summary>\n\n- [📈 分析师团队](docs/agents/analysts.md) - 四类专业分析师详解\n- [🔬 研究员团队](docs/agents/researchers.md) - 看涨/看跌研究员和辩论机制\n- [💼 交易员智能体](docs/agents/trader.md) - 交易决策制定流程\n- [🛡️ 风险管理](docs/agents/risk-management.md) - 多层次风险评估体系\n- [👔 管理层智能体](docs/agents/managers.md) - 协调和决策管理\n\n</details>\n\n<details>\n<summary><strong>📊 数据处理</strong> - 技术核心实现</summary>\n\n- [🔌 数据源集成](docs/data/data-sources.md) - 支持的数据源和API集成\n- [⚙️ 数据处理流程](docs/data/data-processing.md) - 数据清洗、转换和验证\n- [💾 缓存策略](docs/data/caching.md) - 多层缓存优化性能\n\n</details>\n\n<details>\n<summary><strong>⚙️ 配置与部署</strong> - 性能调优指南</summary>\n\n- [📝 配置指南](docs/configuration/config-guide.md) - 详细的配置选项说明\n- [🧠 LLM配置](docs/configuration/llm-config.md) - 大语言模型配置优化\n\n</details>\n\n<details>\n<summary><strong>💡 示例和教程</strong> - 实战应用指南</summary>\n\n- [📚 基础示例](docs/examples/basic-examples.md) - 8个实用的基础示例\n- [🚀 高级示例](docs/examples/advanced-examples.md) - 复杂场景和扩展开发\n\n</details>\n\n<details>\n<summary><strong>❓ 帮助文档</strong> - 问题解决方案</summary>\n\n- [🆘 常见问题](docs/faq/faq.md) - 详细的FAQ和解决方案\n\n</details>\n\n## 💰 成本控制\n\n### 典型使用成本\n\n- **经济模式**: $0.01-0.05/次分析 (使用 gpt-4o-mini)\n- **标准模式**: $0.05-0.15/次分析 (使用 gpt-4o)\n- **高精度模式**: $0.10-0.30/次分析 (使用 gpt-4o + 多轮辩论)\n\n### 成本优化建议\n\n```python\n# 低成本配置示例\ncost_optimized_config = {\n    \"deep_think_llm\": \"gpt-4o-mini\",\n    \"quick_think_llm\": \"gpt-4o-mini\", \n    \"max_debate_rounds\": 1,\n    \"online_tools\": False  # 使用缓存数据\n}\n```\n\n## 🤝 贡献指南\n\n我们欢迎各种形式的贡献：\n\n### 贡献类型\n\n- 🐛 **Bug修复** - 发现并修复问题\n- ✨ **新功能** - 添加新的功能特性\n- 📚 **文档改进** - 完善文档和教程\n- 🌐 **本地化** - 翻译和本地化工作\n- 🎨 **代码优化** - 性能优化和代码重构\n\n### 贡献流程\n\n1. Fork 本仓库\n2. 创建特性分支 (`git checkout -b feature/AmazingFeature`)\n3. 提交更改 (`git commit -m 'Add some AmazingFeature'`)\n4. 推送到分支 (`git push origin feature/AmazingFeature`)\n5. 创建 Pull Request\n\n### 📋 查看贡献者\n\n查看所有贡献者和详细贡献内容：**[🤝 贡献者名单](CONTRIBUTORS.md)**\n\n## 📄 许可证\n\n本项目基于 Apache 2.0 许可证开源。详见 [LICENSE](LICENSE) 文件。\n\n### 许可证说明\n\n- ✅ 商业使用\n- ✅ 修改和分发\n- ✅ 私人使用\n- ✅ 专利使用\n- ❗ 需要保留版权声明\n- ❗ 需要包含许可证副本\n\n## 🙏 致谢与感恩\n\n### 🌟 向源项目开发者致敬\n\n我们向 [Tauric Research](https://github.com/TauricResearch) 团队表达最深的敬意和感谢：\n\n- **🎯 愿景领导者**: 感谢您们在AI金融领域的前瞻性思考和创新实践\n- **💎 珍贵源码**: 感谢您们开源的每一行代码，它们凝聚着无数的智慧和心血\n- **🏗️ 架构大师**: 感谢您们设计了如此优雅、可扩展的多智能体框架\n- **💡 技术先驱**: 感谢您们将前沿AI技术与金融实务完美结合\n- **🔄 持续贡献**: 感谢您们持续的维护、更新和改进工作\n\n### 🤝 社区贡献者致谢\n\n感谢所有为TradingAgents-CN项目做出贡献的开发者和用户！\n\n详细的贡献者名单和贡献内容请查看：**[📋 贡献者名单](CONTRIBUTORS.md)**\n\n包括但不限于：\n\n- 🐳 **Docker容器化** - 部署方案优化\n- 📄 **报告导出功能** - 多格式输出支持\n- 🐛 **Bug修复** - 系统稳定性提升\n- 🔧 **代码优化** - 用户体验改进\n- 📝 **文档完善** - 使用指南和教程\n- 🌍 **社区建设** - 问题反馈和推广\n- **🌍 开源贡献**: 感谢您们选择Apache 2.0协议，给予开发者最大的自由\n- **📚 知识分享**: 感谢您们提供的详细文档和最佳实践指导\n\n**特别感谢**：[TradingAgents](https://github.com/TauricResearch/TradingAgents) 项目为我们提供了坚实的技术基础。虽然Apache 2.0协议赋予了我们使用源码的权利，但我们深知每一行代码的珍贵价值，将永远铭记并感谢您们的无私贡献。\n\n### 🇨🇳 推广使命的初心\n\n创建这个中文增强版本，我们怀着以下初心：\n\n- **🌉 技术传播**: 让优秀的TradingAgents技术在中国得到更广泛的应用\n- **🎓 教育普及**: 为中国的AI金融教育提供更好的工具和资源\n- **🤝 文化桥梁**: 在中西方技术社区之间搭建交流合作的桥梁\n- **🚀 创新推动**: 推动中国金融科技领域的AI技术创新和应用\n\n### 🌍 开源社区\n\n感谢所有为本项目贡献代码、文档、建议和反馈的开发者和用户。正是因为有了大家的支持，我们才能更好地服务中文用户社区。\n\n### 🤝 合作共赢\n\n我们承诺：\n\n- **尊重原创**: 始终尊重源项目的知识产权和开源协议\n- **反馈贡献**: 将有价值的改进和创新反馈给源项目和开源社区\n- **持续改进**: 不断完善中文增强版本，提供更好的用户体验\n- **开放合作**: 欢迎与源项目团队和全球开发者进行技术交流与合作\n\n## 📈 版本历史\n\n- **v0.1.13** (2025-08-02): 🤖 原生OpenAI支持与Google AI生态系统全面集成 ✨ **最新版本**\n- **v0.1.12** (2025-07-29): 🧠 智能新闻分析模块与项目结构优化\n- **v0.1.11** (2025-07-27): 🤖 多LLM提供商集成与模型选择持久化\n- **v0.1.10** (2025-07-18): 🚀 Web界面实时进度显示与智能会话管理\n- **v0.1.9** (2025-07-16): 🎯 CLI用户体验重大优化与统一日志管理\n- **v0.1.8** (2025-07-15): 🎨 Web界面全面优化与用户体验提升\n- **v0.1.7** (2025-07-13): 🐳 容器化部署与专业报告导出\n- **v0.1.6** (2025-07-11): 🔧 阿里百炼修复与数据源升级\n- **v0.1.5** (2025-07-08): 📊 添加Deepseek模型支持\n- **v0.1.4** (2025-07-05): 🏗️ 架构优化与配置管理重构\n- **v0.1.3** (2025-06-28): 🇨🇳 A股市场完整支持\n- **v0.1.2** (2025-06-15): 🌐 Web界面和配置管理\n- **v0.1.1** (2025-06-01): 🧠 国产LLM集成\n\n📋 **详细更新日志**: [CHANGELOG.md](./docs/releases/CHANGELOG.md)\n\n## 📞 联系方式\n\n- **GitHub Issues**: [提交问题和建议](https://github.com/hsliuping/TradingAgents-CN/issues)\n- **邮箱**: hsliup@163.com\n- 项目ＱＱ群：782124367\n- **原项目**: [TauricResearch/TradingAgents](https://github.com/TauricResearch/TradingAgents)\n- **文档**: [完整文档目录](docs/)\n\n## ⚠️ 风险提示\n\n**重要声明**: 本框架仅用于研究和教育目的，不构成投资建议。\n\n- 📊 交易表现可能因多种因素而异\n- 🤖 AI模型的预测存在不确定性\n- 💰 投资有风险，决策需谨慎\n- 👨‍💼 建议咨询专业财务顾问\n\n---\n\n<div align=\"center\">\n\n**🌟 如果这个项目对您有帮助，请给我们一个 Star！**\n\n[⭐ Star this repo](https://github.com/hsliuping/TradingAgents-CN) | [🍴 Fork this repo](https://github.com/hsliuping/TradingAgents-CN/fork) | [📖 Read the docs](./docs/)\n\n</div>\n",
    "author": "hsliuping",
    "project": "TradingAgents-CN",
    "date": "2025-10-03"
}